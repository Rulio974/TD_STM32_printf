
STM32_uartPrintf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002974  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b44  08002b44  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002b44  08002b44  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b44  08002b44  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000068  08002bb4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002bb4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d46  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001515  00000000  00000000  00025dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000698  00000000  00000000  000272f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d0  00000000  00000000  00027988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000042b0  00000000  00000000  00027f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004f41  00000000  00000000  0002c208  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004b8b7  00000000  00000000  00031149  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007ca00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf0  00000000  00000000  0007ca7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a1c 	.word	0x08002a1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002a1c 	.word	0x08002a1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <LL_EXTI_EnableIT_0_31+0x1c>)
 80003fe:	6819      	ldr	r1, [r3, #0]
 8000400:	4b03      	ldr	r3, [pc, #12]	; (8000410 <LL_EXTI_EnableIT_0_31+0x1c>)
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	430a      	orrs	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
}
 8000408:	46c0      	nop			; (mov r8, r8)
 800040a:	46bd      	mov	sp, r7
 800040c:	b002      	add	sp, #8
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40010400 	.word	0x40010400

08000414 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <LL_EXTI_DisableIT_0_31+0x20>)
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	43d9      	mvns	r1, r3
 8000424:	4b03      	ldr	r3, [pc, #12]	; (8000434 <LL_EXTI_DisableIT_0_31+0x20>)
 8000426:	400a      	ands	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b002      	add	sp, #8
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40010400 	.word	0x40010400

08000438 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000442:	6859      	ldr	r1, [r3, #4]
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	430a      	orrs	r2, r1
 800044a:	605a      	str	r2, [r3, #4]

}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40010400 	.word	0x40010400

08000458 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <LL_EXTI_DisableEvent_0_31+0x20>)
 8000462:	685a      	ldr	r2, [r3, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	43d9      	mvns	r1, r3
 8000468:	4b03      	ldr	r3, [pc, #12]	; (8000478 <LL_EXTI_DisableEvent_0_31+0x20>)
 800046a:	400a      	ands	r2, r1
 800046c:	605a      	str	r2, [r3, #4]
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	b002      	add	sp, #8
 8000474:	bd80      	pop	{r7, pc}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40010400 	.word	0x40010400

0800047c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000486:	6899      	ldr	r1, [r3, #8]
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	430a      	orrs	r2, r1
 800048e:	609a      	str	r2, [r3, #8]

}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b002      	add	sp, #8
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40010400 	.word	0x40010400

0800049c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80004a6:	689a      	ldr	r2, [r3, #8]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	43d9      	mvns	r1, r3
 80004ac:	4b03      	ldr	r3, [pc, #12]	; (80004bc <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80004ae:	400a      	ands	r2, r1
 80004b0:	609a      	str	r2, [r3, #8]

}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	40010400 	.word	0x40010400

080004c0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80004ca:	68d9      	ldr	r1, [r3, #12]
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	430a      	orrs	r2, r1
 80004d2:	60da      	str	r2, [r3, #12]
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40010400 	.word	0x40010400

080004e0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80004e8:	4b05      	ldr	r3, [pc, #20]	; (8000500 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80004ea:	68da      	ldr	r2, [r3, #12]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	43d9      	mvns	r1, r3
 80004f0:	4b03      	ldr	r3, [pc, #12]	; (8000500 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80004f2:	400a      	ands	r2, r1
 80004f4:	60da      	str	r2, [r3, #12]
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40010400 	.word	0x40010400

08000504 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800050c:	230f      	movs	r3, #15
 800050e:	18fb      	adds	r3, r7, r3
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d065      	beq.n	80005e8 <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d100      	bne.n	8000526 <LL_EXTI_Init+0x22>
 8000524:	e06b      	b.n	80005fe <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d00e      	beq.n	800054c <LL_EXTI_Init+0x48>
 800052e:	2b02      	cmp	r3, #2
 8000530:	d017      	beq.n	8000562 <LL_EXTI_Init+0x5e>
 8000532:	2b00      	cmp	r3, #0
 8000534:	d120      	bne.n	8000578 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff ff8c 	bl	8000458 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	0018      	movs	r0, r3
 8000546:	f7ff ff55 	bl	80003f4 <LL_EXTI_EnableIT_0_31>
          break;
 800054a:	e01a      	b.n	8000582 <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff ff5f 	bl	8000414 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff ff6c 	bl	8000438 <LL_EXTI_EnableEvent_0_31>
          break;
 8000560:	e00f      	b.n	8000582 <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	0018      	movs	r0, r3
 8000568:	f7ff ff44 	bl	80003f4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff ff61 	bl	8000438 <LL_EXTI_EnableEvent_0_31>
          break;
 8000576:	e004      	b.n	8000582 <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8000578:	230f      	movs	r3, #15
 800057a:	18fb      	adds	r3, r7, r3
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
          break;
 8000580:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	799b      	ldrb	r3, [r3, #6]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d039      	beq.n	80005fe <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	799b      	ldrb	r3, [r3, #6]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d00e      	beq.n	80005b0 <LL_EXTI_Init+0xac>
 8000592:	2b03      	cmp	r3, #3
 8000594:	d017      	beq.n	80005c6 <LL_EXTI_Init+0xc2>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d120      	bne.n	80005dc <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	0018      	movs	r0, r3
 80005a0:	f7ff ff9e 	bl	80004e0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff ff67 	bl	800047c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80005ae:	e027      	b.n	8000600 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff ff71 	bl	800049c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff7e 	bl	80004c0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80005c4:	e01c      	b.n	8000600 <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ff56 	bl	800047c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ff73 	bl	80004c0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80005da:	e011      	b.n	8000600 <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 80005dc:	230f      	movs	r3, #15
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
            break;
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	e00b      	b.n	8000600 <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	0018      	movs	r0, r3
 80005ee:	f7ff ff11 	bl	8000414 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff ff2e 	bl	8000458 <LL_EXTI_DisableEvent_0_31>
 80005fc:	e000      	b.n	8000600 <LL_EXTI_Init+0xfc>
      }
 80005fe:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8000600:	230f      	movs	r3, #15
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	781b      	ldrb	r3, [r3, #0]
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b004      	add	sp, #16
 800060c:	bd80      	pop	{r7, pc}

0800060e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	68ba      	ldr	r2, [r7, #8]
 8000622:	435a      	muls	r2, r3
 8000624:	0013      	movs	r3, r2
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	189b      	adds	r3, r3, r2
 800062a:	43db      	mvns	r3, r3
 800062c:	400b      	ands	r3, r1
 800062e:	001a      	movs	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	434b      	muls	r3, r1
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	434b      	muls	r3, r1
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	b004      	add	sp, #16
 8000646:	bd80      	pop	{r7, pc}

08000648 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	68ba      	ldr	r2, [r7, #8]
 800065a:	43d2      	mvns	r2, r2
 800065c:	401a      	ands	r2, r3
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	434b      	muls	r3, r1
 8000664:	431a      	orrs	r2, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	605a      	str	r2, [r3, #4]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b004      	add	sp, #16
 8000670:	bd80      	pop	{r7, pc}

08000672 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	60f8      	str	r0, [r7, #12]
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6899      	ldr	r1, [r3, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	68ba      	ldr	r2, [r7, #8]
 8000686:	435a      	muls	r2, r3
 8000688:	0013      	movs	r3, r2
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	189b      	adds	r3, r3, r2
 800068e:	43db      	mvns	r3, r3
 8000690:	400b      	ands	r3, r1
 8000692:	001a      	movs	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	434b      	muls	r3, r1
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	434b      	muls	r3, r1
 800069e:	431a      	orrs	r2, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	609a      	str	r2, [r3, #8]
}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b004      	add	sp, #16
 80006aa:	bd80      	pop	{r7, pc}

080006ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	68d9      	ldr	r1, [r3, #12]
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	435a      	muls	r2, r3
 80006c2:	0013      	movs	r3, r2
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	189b      	adds	r3, r3, r2
 80006c8:	43db      	mvns	r3, r3
 80006ca:	400b      	ands	r3, r1
 80006cc:	001a      	movs	r2, r3
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	434b      	muls	r3, r1
 80006d4:	6879      	ldr	r1, [r7, #4]
 80006d6:	434b      	muls	r3, r1
 80006d8:	431a      	orrs	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	60da      	str	r2, [r3, #12]
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b004      	add	sp, #16
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b084      	sub	sp, #16
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6a19      	ldr	r1, [r3, #32]
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	68ba      	ldr	r2, [r7, #8]
 80006fa:	4353      	muls	r3, r2
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	4353      	muls	r3, r2
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	435a      	muls	r2, r3
 8000704:	0013      	movs	r3, r2
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	43db      	mvns	r3, r3
 800070c:	400b      	ands	r3, r1
 800070e:	001a      	movs	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	68b9      	ldr	r1, [r7, #8]
 8000714:	434b      	muls	r3, r1
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	434b      	muls	r3, r1
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	434b      	muls	r3, r1
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	434b      	muls	r3, r1
 8000722:	431a      	orrs	r2, r3
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b004      	add	sp, #16
 800072e:	bd80      	pop	{r7, pc}

08000730 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	68ba      	ldr	r2, [r7, #8]
 8000746:	0a12      	lsrs	r2, r2, #8
 8000748:	4353      	muls	r3, r2
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	0a12      	lsrs	r2, r2, #8
 800074e:	4353      	muls	r3, r2
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	0a12      	lsrs	r2, r2, #8
 8000754:	435a      	muls	r2, r3
 8000756:	0013      	movs	r3, r2
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	43db      	mvns	r3, r3
 800075e:	400b      	ands	r3, r1
 8000760:	001a      	movs	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	68b9      	ldr	r1, [r7, #8]
 8000768:	0a09      	lsrs	r1, r1, #8
 800076a:	434b      	muls	r3, r1
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	0a09      	lsrs	r1, r1, #8
 8000770:	434b      	muls	r3, r1
 8000772:	68b9      	ldr	r1, [r7, #8]
 8000774:	0a09      	lsrs	r1, r1, #8
 8000776:	434b      	muls	r3, r1
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	434b      	muls	r3, r1
 800077c:	431a      	orrs	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b004      	add	sp, #16
 8000788:	bd80      	pop	{r7, pc}

0800078a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800079c:	e040      	b.n	8000820 <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2101      	movs	r1, #1
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	4091      	lsls	r1, r2
 80007a8:	000a      	movs	r2, r1
 80007aa:	4013      	ands	r3, r2
 80007ac:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d032      	beq.n	800081a <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ff26 	bl	800060e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d003      	beq.n	80007d2 <LL_GPIO_Init+0x48>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	d106      	bne.n	80007e0 <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	0018      	movs	r0, r3
 80007dc:	f7ff ff49 	bl	8000672 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	691a      	ldr	r2, [r3, #16]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff ff5f 	bl	80006ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d111      	bne.n	800081a <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2bff      	cmp	r3, #255	; 0xff
 80007fa:	d807      	bhi.n	800080c <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	695a      	ldr	r2, [r3, #20]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ff6e 	bl	80006e6 <LL_GPIO_SetAFPin_0_7>
 800080a:	e006      	b.n	800081a <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff ff8b 	bl	8000730 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	3301      	adds	r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	40da      	lsrs	r2, r3
 8000828:	1e13      	subs	r3, r2, #0
 800082a:	d1b8      	bne.n	800079e <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d003      	beq.n	800083c <LL_GPIO_Init+0xb2>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d107      	bne.n	800084c <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	6819      	ldr	r1, [r3, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff fefe 	bl	8000648 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800084c:	2300      	movs	r3, #0
}
 800084e:	0018      	movs	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <LL_RCC_HSI_IsReady+0x1c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2204      	movs	r2, #4
 8000862:	4013      	ands	r3, r2
 8000864:	2b04      	cmp	r3, #4
 8000866:	d101      	bne.n	800086c <LL_RCC_HSI_IsReady+0x14>
 8000868:	2301      	movs	r3, #1
 800086a:	e000      	b.n	800086e <LL_RCC_HSI_IsReady+0x16>
 800086c:	2300      	movs	r3, #0
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CSR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <LL_RCC_LSE_IsReady+0x24>)
 800087e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	401a      	ands	r2, r3
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	429a      	cmp	r2, r3
 800088c:	d101      	bne.n	8000892 <LL_RCC_LSE_IsReady+0x1a>
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <LL_RCC_LSE_IsReady+0x1c>
 8000892:	2300      	movs	r3, #0
}
 8000894:	0018      	movs	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_4
  *         @arg @ref LL_RCC_MSIRANGE_5
  *         @arg @ref LL_RCC_MSIRANGE_6
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <LL_RCC_MSI_GetRange+0x14>)
 80008a6:	685a      	ldr	r2, [r3, #4]
 80008a8:	23e0      	movs	r3, #224	; 0xe0
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	4013      	ands	r3, r2
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000

080008b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <LL_RCC_GetSysClkSource+0x14>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	220c      	movs	r2, #12
 80008c2:	4013      	ands	r3, r2
}
 80008c4:	0018      	movs	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <LL_RCC_GetAHBPrescaler+0x14>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	22f0      	movs	r2, #240	; 0xf0
 80008da:	4013      	ands	r3, r2
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	40021000 	.word	0x40021000

080008e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80008ec:	4b03      	ldr	r3, [pc, #12]	; (80008fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80008ee:	68da      	ldr	r2, [r3, #12]
 80008f0:	23e0      	movs	r3, #224	; 0xe0
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4013      	ands	r3, r2
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000

08000900 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	23e0      	movs	r3, #224	; 0xe0
 800090a:	019b      	lsls	r3, r3, #6
 800090c:	4013      	ands	r3, r2
}
 800090e:	0018      	movs	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000920:	4b05      	ldr	r3, [pc, #20]	; (8000938 <LL_RCC_GetUSARTClockSource+0x20>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000924:	687a      	ldr	r2, [r7, #4]
 8000926:	401a      	ands	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	041b      	lsls	r3, r3, #16
 800092c:	4313      	orrs	r3, r2
}
 800092e:	0018      	movs	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	b002      	add	sp, #8
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	40021000 	.word	0x40021000

0800093c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <LL_RCC_PLL_GetMainSource+0x14>)
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	025b      	lsls	r3, r3, #9
 8000948:	4013      	ands	r3, r2
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000

08000954 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <LL_RCC_PLL_GetMultiplicator+0x14>)
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	23f0      	movs	r3, #240	; 0xf0
 800095e:	039b      	lsls	r3, r3, #14
 8000960:	4013      	ands	r3, r2
}
 8000962:	0018      	movs	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <LL_RCC_PLL_GetDivider+0x14>)
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	23c0      	movs	r3, #192	; 0xc0
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	4013      	ands	r3, r2
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000988:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2210      	movs	r2, #16
 800098e:	4013      	ands	r3, r2
 8000990:	2b10      	cmp	r3, #16
 8000992:	d101      	bne.n	8000998 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8000998:	2300      	movs	r3, #0
}
 800099a:	0018      	movs	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021000 	.word	0x40021000

080009a4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d135      	bne.n	8000a22 <LL_RCC_GetUSARTClockFreq+0x7e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ffad 	bl	8000918 <LL_RCC_GetUSARTClockSource>
 80009be:	0003      	movs	r3, r0
 80009c0:	4a3c      	ldr	r2, [pc, #240]	; (8000ab4 <LL_RCC_GetUSARTClockFreq+0x110>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00a      	beq.n	80009dc <LL_RCC_GetUSARTClockFreq+0x38>
 80009c6:	4a3c      	ldr	r2, [pc, #240]	; (8000ab8 <LL_RCC_GetUSARTClockFreq+0x114>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d015      	beq.n	80009f8 <LL_RCC_GetUSARTClockFreq+0x54>
 80009cc:	4a3b      	ldr	r2, [pc, #236]	; (8000abc <LL_RCC_GetUSARTClockFreq+0x118>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d11a      	bne.n	8000a08 <LL_RCC_GetUSARTClockFreq+0x64>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80009d2:	f000 f87f 	bl	8000ad4 <RCC_GetSystemClockFreq>
 80009d6:	0003      	movs	r3, r0
 80009d8:	60fb      	str	r3, [r7, #12]
        break;
 80009da:	e027      	b.n	8000a2c <LL_RCC_GetUSARTClockFreq+0x88>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80009dc:	f7ff ff3c 	bl	8000858 <LL_RCC_HSI_IsReady>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d020      	beq.n	8000a26 <LL_RCC_GetUSARTClockFreq+0x82>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80009e4:	f7ff ffce 	bl	8000984 <LL_RCC_IsActiveFlag_HSIDIV>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d002      	beq.n	80009f2 <LL_RCC_GetUSARTClockFreq+0x4e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 80009ec:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <LL_RCC_GetUSARTClockFreq+0x11c>)
 80009ee:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 80009f0:	e019      	b.n	8000a26 <LL_RCC_GetUSARTClockFreq+0x82>
            usart_frequency = HSI_VALUE;
 80009f2:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <LL_RCC_GetUSARTClockFreq+0x120>)
 80009f4:	60fb      	str	r3, [r7, #12]
        break;
 80009f6:	e016      	b.n	8000a26 <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80009f8:	f7ff ff3e 	bl	8000878 <LL_RCC_LSE_IsReady>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d014      	beq.n	8000a2a <LL_RCC_GetUSARTClockFreq+0x86>
        {
          usart_frequency = LSE_VALUE;
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000a06:	e010      	b.n	8000a2a <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000a08:	f000 f864 	bl	8000ad4 <RCC_GetSystemClockFreq>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f8a4 	bl	8000b5c <RCC_GetHCLKClockFreq>
 8000a14:	0003      	movs	r3, r0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 f8ca 	bl	8000bb0 <RCC_GetPCLK2ClockFreq>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	60fb      	str	r3, [r7, #12]
        break;
 8000a20:	e004      	b.n	8000a2c <LL_RCC_GetUSARTClockFreq+0x88>
    }
  }
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	e002      	b.n	8000a2c <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	e000      	b.n	8000a2c <LL_RCC_GetUSARTClockFreq+0x88>
        break;
 8000a2a:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b0c      	cmp	r3, #12
 8000a30:	d135      	bne.n	8000a9e <LL_RCC_GetUSARTClockFreq+0xfa>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff ff6f 	bl	8000918 <LL_RCC_GetUSARTClockSource>
 8000a3a:	0003      	movs	r3, r0
 8000a3c:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <LL_RCC_GetUSARTClockFreq+0x124>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d00a      	beq.n	8000a58 <LL_RCC_GetUSARTClockFreq+0xb4>
 8000a42:	4a22      	ldr	r2, [pc, #136]	; (8000acc <LL_RCC_GetUSARTClockFreq+0x128>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d015      	beq.n	8000a74 <LL_RCC_GetUSARTClockFreq+0xd0>
 8000a48:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <LL_RCC_GetUSARTClockFreq+0x12c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d11a      	bne.n	8000a84 <LL_RCC_GetUSARTClockFreq+0xe0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000a4e:	f000 f841 	bl	8000ad4 <RCC_GetSystemClockFreq>
 8000a52:	0003      	movs	r3, r0
 8000a54:	60fb      	str	r3, [r7, #12]
        break;
 8000a56:	e027      	b.n	8000aa8 <LL_RCC_GetUSARTClockFreq+0x104>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000a58:	f7ff fefe 	bl	8000858 <LL_RCC_HSI_IsReady>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d020      	beq.n	8000aa2 <LL_RCC_GetUSARTClockFreq+0xfe>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000a60:	f7ff ff90 	bl	8000984 <LL_RCC_IsActiveFlag_HSIDIV>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d002      	beq.n	8000a6e <LL_RCC_GetUSARTClockFreq+0xca>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <LL_RCC_GetUSARTClockFreq+0x11c>)
 8000a6a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000a6c:	e019      	b.n	8000aa2 <LL_RCC_GetUSARTClockFreq+0xfe>
            usart_frequency = HSI_VALUE;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <LL_RCC_GetUSARTClockFreq+0x120>)
 8000a70:	60fb      	str	r3, [r7, #12]
        break;
 8000a72:	e016      	b.n	8000aa2 <LL_RCC_GetUSARTClockFreq+0xfe>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8000a74:	f7ff ff00 	bl	8000878 <LL_RCC_LSE_IsReady>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d014      	beq.n	8000aa6 <LL_RCC_GetUSARTClockFreq+0x102>
        {
          usart_frequency = LSE_VALUE;
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	021b      	lsls	r3, r3, #8
 8000a80:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000a82:	e010      	b.n	8000aa6 <LL_RCC_GetUSARTClockFreq+0x102>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000a84:	f000 f826 	bl	8000ad4 <RCC_GetSystemClockFreq>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f866 	bl	8000b5c <RCC_GetHCLKClockFreq>
 8000a90:	0003      	movs	r3, r0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 f878 	bl	8000b88 <RCC_GetPCLK1ClockFreq>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	60fb      	str	r3, [r7, #12]
        break;
 8000a9c:	e004      	b.n	8000aa8 <LL_RCC_GetUSARTClockFreq+0x104>
    }
  }
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	e002      	b.n	8000aa8 <LL_RCC_GetUSARTClockFreq+0x104>
        break;
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	e000      	b.n	8000aa8 <LL_RCC_GetUSARTClockFreq+0x104>
        break;
 8000aa6:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b004      	add	sp, #16
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	00030002 	.word	0x00030002
 8000ab8:	00030003 	.word	0x00030003
 8000abc:	00030001 	.word	0x00030001
 8000ac0:	003d0900 	.word	0x003d0900
 8000ac4:	00f42400 	.word	0x00f42400
 8000ac8:	000c0008 	.word	0x000c0008
 8000acc:	000c000c 	.word	0x000c000c
 8000ad0:	000c0004 	.word	0x000c0004

08000ad4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000ada:	f7ff feed 	bl	80008b8 <LL_RCC_GetSysClkSource>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	d013      	beq.n	8000b0c <RCC_GetSystemClockFreq+0x38>
 8000ae4:	d802      	bhi.n	8000aec <RCC_GetSystemClockFreq+0x18>
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d005      	beq.n	8000af6 <RCC_GetSystemClockFreq+0x22>
 8000aea:	e021      	b.n	8000b30 <RCC_GetSystemClockFreq+0x5c>
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d017      	beq.n	8000b20 <RCC_GetSystemClockFreq+0x4c>
 8000af0:	2b0c      	cmp	r3, #12
 8000af2:	d018      	beq.n	8000b26 <RCC_GetSystemClockFreq+0x52>
 8000af4:	e01c      	b.n	8000b30 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000af6:	f7ff fed3 	bl	80008a0 <LL_RCC_MSI_GetRange>
 8000afa:	0003      	movs	r3, r0
 8000afc:	0b5b      	lsrs	r3, r3, #13
 8000afe:	3301      	adds	r3, #1
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	0212      	lsls	r2, r2, #8
 8000b04:	409a      	lsls	r2, r3
 8000b06:	0013      	movs	r3, r2
 8000b08:	607b      	str	r3, [r7, #4]
      break;
 8000b0a:	e01c      	b.n	8000b46 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000b0c:	f7ff ff3a 	bl	8000984 <LL_RCC_IsActiveFlag_HSIDIV>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d002      	beq.n	8000b1a <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <RCC_GetSystemClockFreq+0x7c>)
 8000b16:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8000b18:	e015      	b.n	8000b46 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <RCC_GetSystemClockFreq+0x80>)
 8000b1c:	607b      	str	r3, [r7, #4]
      break;
 8000b1e:	e012      	b.n	8000b46 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <RCC_GetSystemClockFreq+0x84>)
 8000b22:	607b      	str	r3, [r7, #4]
      break;
 8000b24:	e00f      	b.n	8000b46 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000b26:	f000 f857 	bl	8000bd8 <RCC_PLL_GetFreqDomain_SYS>
 8000b2a:	0003      	movs	r3, r0
 8000b2c:	607b      	str	r3, [r7, #4]
      break;
 8000b2e:	e00a      	b.n	8000b46 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000b30:	f7ff feb6 	bl	80008a0 <LL_RCC_MSI_GetRange>
 8000b34:	0003      	movs	r3, r0
 8000b36:	0b5b      	lsrs	r3, r3, #13
 8000b38:	3301      	adds	r3, #1
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	0212      	lsls	r2, r2, #8
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	607b      	str	r3, [r7, #4]
      break;
 8000b44:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8000b46:	687b      	ldr	r3, [r7, #4]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	003d0900 	.word	0x003d0900
 8000b54:	00f42400 	.word	0x00f42400
 8000b58:	007a1200 	.word	0x007a1200

08000b5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000b64:	f7ff feb4 	bl	80008d0 <LL_RCC_GetAHBPrescaler>
 8000b68:	0003      	movs	r3, r0
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	4013      	ands	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <RCC_GetHCLKClockFreq+0x28>)
 8000b72:	5cd3      	ldrb	r3, [r2, r3]
 8000b74:	001a      	movs	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	40d3      	lsrs	r3, r2
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	08002a88 	.word	0x08002a88

08000b88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000b90:	f7ff feaa 	bl	80008e8 <LL_RCC_GetAPB1Prescaler>
 8000b94:	0003      	movs	r3, r0
 8000b96:	0a1b      	lsrs	r3, r3, #8
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <RCC_GetPCLK1ClockFreq+0x24>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	40d3      	lsrs	r3, r2
}
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	08002a98 	.word	0x08002a98

08000bb0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000bb8:	f7ff fea2 	bl	8000900 <LL_RCC_GetAPB2Prescaler>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	0adb      	lsrs	r3, r3, #11
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <RCC_GetPCLK2ClockFreq+0x24>)
 8000bc2:	5cd3      	ldrb	r3, [r2, r3]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	40d3      	lsrs	r3, r2
}
 8000bca:	0018      	movs	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	08002a98 	.word	0x08002a98

08000bd8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000bde:	f7ff fead 	bl	800093c <LL_RCC_PLL_GetMainSource>
 8000be2:	0003      	movs	r3, r0
 8000be4:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d109      	bne.n	8000c00 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000bec:	f7ff feca 	bl	8000984 <LL_RCC_IsActiveFlag_HSIDIV>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d002      	beq.n	8000bfa <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000bf6:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8000bf8:	e005      	b.n	8000c06 <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8000bfc:	607b      	str	r3, [r7, #4]
      break;
 8000bfe:	e002      	b.n	8000c06 <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8000c02:	607b      	str	r3, [r7, #4]
      break;
 8000c04:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8000c06:	f7ff fea5 	bl	8000954 <LL_RCC_PLL_GetMultiplicator>
 8000c0a:	0003      	movs	r3, r0
 8000c0c:	0c9b      	lsrs	r3, r3, #18
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8000c10:	5cd3      	ldrb	r3, [r2, r3]
 8000c12:	001a      	movs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4353      	muls	r3, r2
 8000c18:	001c      	movs	r4, r3
 8000c1a:	f7ff fea7 	bl	800096c <LL_RCC_PLL_GetDivider>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	0d9b      	lsrs	r3, r3, #22
 8000c22:	3301      	adds	r3, #1
 8000c24:	0019      	movs	r1, r3
 8000c26:	0020      	movs	r0, r4
 8000c28:	f7ff fa6e 	bl	8000108 <__udivsi3>
 8000c2c:	0003      	movs	r3, r0
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b003      	add	sp, #12
 8000c34:	bd90      	pop	{r4, r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	003d0900 	.word	0x003d0900
 8000c3c:	00f42400 	.word	0x00f42400
 8000c40:	007a1200 	.word	0x007a1200
 8000c44:	08002aa0 	.word	0x08002aa0

08000c48 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4013      	ands	r3, r2
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d101      	bne.n	8000c60 <LL_USART_IsEnabled+0x18>
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	e000      	b.n	8000c62 <LL_USART_IsEnabled+0x1a>
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <LL_USART_SetStopBitsLength+0x24>)
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	605a      	str	r2, [r3, #4]
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	ffffcfff 	.word	0xffffcfff

08000c94 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <LL_USART_SetHWFlowCtrl+0x24>)
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	fffffcff 	.word	0xfffffcff

08000cbc <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8000cbc:	b5b0      	push	{r4, r5, r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv;
  register uint32_t brrtemp;

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d117      	bne.n	8000d04 <LL_USART_SetBaudRate+0x48>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	005a      	lsls	r2, r3, #1
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	085b      	lsrs	r3, r3, #1
 8000cdc:	18d3      	adds	r3, r2, r3
 8000cde:	6839      	ldr	r1, [r7, #0]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff fa11 	bl	8000108 <__udivsi3>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	001d      	movs	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <LL_USART_SetBaudRate+0x6c>)
 8000cee:	402b      	ands	r3, r5
 8000cf0:	001c      	movs	r4, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000cf2:	086b      	lsrs	r3, r5, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8000d02:	e00c      	b.n	8000d1e <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	085a      	lsrs	r2, r3, #1
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	18d3      	adds	r3, r2, r3
 8000d0c:	6839      	ldr	r1, [r7, #0]
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff f9fa 	bl	8000108 <__udivsi3>
 8000d14:	0003      	movs	r3, r0
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	001a      	movs	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	60da      	str	r2, [r3, #12]
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bdb0      	pop	{r4, r5, r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	0000fff0 	.word	0x0000fff0

08000d2c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000d36:	230f      	movs	r3, #15
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff ff7f 	bl	8000c48 <LL_USART_IsEnabled>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d145      	bne.n	8000dda <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a25      	ldr	r2, [pc, #148]	; (8000de8 <LL_USART_Init+0xbc>)
 8000d54:	401a      	ands	r2, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	6859      	ldr	r1, [r3, #4]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	4319      	orrs	r1, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	4319      	orrs	r1, r3
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	430b      	orrs	r3, r1
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff ff76 	bl	8000c6c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	695a      	ldr	r2, [r3, #20]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	0011      	movs	r1, r2
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ff83 	bl	8000c94 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a16      	ldr	r2, [pc, #88]	; (8000dec <LL_USART_Init+0xc0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d105      	bne.n	8000da2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f7ff fe04 	bl	80009a4 <LL_RCC_GetUSARTClockFreq>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	e008      	b.n	8000db4 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <LL_USART_Init+0xc4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d104      	bne.n	8000db4 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000daa:	200c      	movs	r0, #12
 8000dac:	f7ff fdfa 	bl	80009a4 <LL_RCC_GetUSARTClockFreq>
 8000db0:	0003      	movs	r3, r0
 8000db2:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00f      	beq.n	8000dda <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d00b      	beq.n	8000dda <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 8000dc2:	230f      	movs	r3, #15
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	699a      	ldr	r2, [r3, #24]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff ff71 	bl	8000cbc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781b      	ldrb	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b004      	add	sp, #16
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	efff69f3 	.word	0xefff69f3
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40004400 	.word	0x40004400

08000df4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff f981 	bl	8000108 <__udivsi3>
 8000e06:	0003      	movs	r3, r0
 8000e08:	001a      	movs	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <LL_InitTick+0x30>)
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <LL_InitTick+0x30>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <LL_InitTick+0x30>)
 8000e18:	2205      	movs	r2, #5
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000e30:	23fa      	movs	r3, #250	; 0xfa
 8000e32:	009a      	lsls	r2, r3, #2
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	0011      	movs	r1, r2
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff ffdb 	bl	8000df4 <LL_InitTick>
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <LL_mDelay+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000e56:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	d00c      	beq.n	8000e78 <LL_mDelay+0x30>
  {
    Delay++;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3301      	adds	r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000e64:	e008      	b.n	8000e78 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <LL_mDelay+0x40>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	2380      	movs	r3, #128	; 0x80
 8000e6c:	025b      	lsls	r3, r3, #9
 8000e6e:	4013      	ands	r3, r2
 8000e70:	d002      	beq.n	8000e78 <LL_mDelay+0x30>
    {
      Delay--;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f3      	bne.n	8000e66 <LL_mDelay+0x1e>
    }
  }
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <LL_SetSystemCoreClock+0x18>)
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000eb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b004      	add	sp, #16
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <LL_SYSCFG_SetEXTISource+0x48>)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	21ff      	movs	r1, #255	; 0xff
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	589b      	ldr	r3, [r3, r2]
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	0c12      	lsrs	r2, r2, #16
 8000ef0:	210f      	movs	r1, #15
 8000ef2:	4091      	lsls	r1, r2
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	43d2      	mvns	r2, r2
 8000ef8:	401a      	ands	r2, r3
 8000efa:	0011      	movs	r1, r2
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	409a      	lsls	r2, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <LL_SYSCFG_SetEXTISource+0x48>)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	24ff      	movs	r4, #255	; 0xff
 8000f0a:	4023      	ands	r3, r4
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	3302      	adds	r3, #2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	501a      	str	r2, [r3, r0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b003      	add	sp, #12
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	40010000 	.word	0x40010000

08000f20 <LL_GPIO_SetPinMode>:
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	435a      	muls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	189b      	adds	r3, r3, r2
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	400b      	ands	r3, r1
 8000f40:	001a      	movs	r2, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	434b      	muls	r3, r1
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	434b      	muls	r3, r1
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]
}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b004      	add	sp, #16
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <LL_GPIO_SetPinPull>:
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	68d9      	ldr	r1, [r3, #12]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	435a      	muls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	189b      	adds	r3, r3, r2
 8000f76:	43db      	mvns	r3, r3
 8000f78:	400b      	ands	r3, r1
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	434b      	muls	r3, r1
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	434b      	muls	r3, r1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	60da      	str	r2, [r3, #12]
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b089      	sub	sp, #36	; 0x24
 8000fb0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000fb2:	2418      	movs	r4, #24
 8000fb4:	193b      	adds	r3, r7, r4
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	2308      	movs	r3, #8
 8000fba:	001a      	movs	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f000 fda3 	bl	8001b08 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	003b      	movs	r3, r7
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	2318      	movs	r3, #24
 8000fc8:	001a      	movs	r2, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	f000 fd9c 	bl	8001b08 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f7ff ff69 	bl	8000ea8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 8000fd6:	2080      	movs	r0, #128	; 0x80
 8000fd8:	f7ff ff66 	bl	8000ea8 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff ff63 	bl	8000ea8 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000fe2:	23a0      	movs	r3, #160	; 0xa0
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	2120      	movs	r1, #32
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ffd3 	bl	8000f94 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <MX_GPIO_Init+0xc0>)
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff ff6e 	bl	8000ed4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	019b      	lsls	r3, r3, #6
 8000ffc:	481c      	ldr	r0, [pc, #112]	; (8001070 <MX_GPIO_Init+0xc4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	0019      	movs	r1, r3
 8001002:	f7ff ffaa 	bl	8000f5a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	019b      	lsls	r3, r3, #6
 800100a:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0xc4>)
 800100c:	2200      	movs	r2, #0
 800100e:	0019      	movs	r1, r3
 8001010:	f7ff ff86 	bl	8000f20 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001014:	0021      	movs	r1, r4
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	0192      	lsls	r2, r2, #6
 800101c:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2201      	movs	r2, #1
 8001022:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001024:	187b      	adds	r3, r7, r1
 8001026:	2200      	movs	r2, #0
 8001028:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2202      	movs	r2, #2
 800102e:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001030:	187b      	adds	r3, r7, r1
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fa66 	bl	8000504 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001038:	003b      	movs	r3, r7
 800103a:	2220      	movs	r2, #32
 800103c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800103e:	003b      	movs	r3, r7
 8001040:	2201      	movs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001044:	003b      	movs	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800104a:	003b      	movs	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001050:	003b      	movs	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001056:	003a      	movs	r2, r7
 8001058:	23a0      	movs	r3, #160	; 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f7ff fb93 	bl	800078a <LL_GPIO_Init>

}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b009      	add	sp, #36	; 0x24
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	00040003 	.word	0x00040003
 8001070:	50000800 	.word	0x50000800

08001074 <LL_RCC_HSI_Enable>:
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <LL_RCC_HSI_Enable+0x18>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <LL_RCC_HSI_Enable+0x18>)
 800107e:	2101      	movs	r1, #1
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40021000 	.word	0x40021000

08001090 <LL_RCC_HSI_IsReady>:
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <LL_RCC_HSI_IsReady+0x1c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	4013      	ands	r3, r2
 800109c:	2b04      	cmp	r3, #4
 800109e:	d101      	bne.n	80010a4 <LL_RCC_HSI_IsReady+0x14>
 80010a0:	2301      	movs	r3, #1
 80010a2:	e000      	b.n	80010a6 <LL_RCC_HSI_IsReady+0x16>
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000

080010b0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80010be:	4013      	ands	r3, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	021a      	lsls	r2, r3, #8
 80010c6:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80010c8:	430a      	orrs	r2, r1
 80010ca:	605a      	str	r2, [r3, #4]
}
 80010cc:	46c0      	nop			; (mov r8, r8)
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	ffffe0ff 	.word	0xffffe0ff

080010dc <LL_RCC_SetSysClkSource>:
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <LL_RCC_SetSysClkSource+0x24>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2203      	movs	r2, #3
 80010ea:	4393      	bics	r3, r2
 80010ec:	0019      	movs	r1, r3
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <LL_RCC_SetSysClkSource+0x24>)
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	60da      	str	r2, [r3, #12]
}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40021000 	.word	0x40021000

08001104 <LL_RCC_GetSysClkSource>:
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <LL_RCC_GetSysClkSource+0x14>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	40021000 	.word	0x40021000

0800111c <LL_RCC_SetAHBPrescaler>:
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <LL_RCC_SetAHBPrescaler+0x24>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	22f0      	movs	r2, #240	; 0xf0
 800112a:	4393      	bics	r3, r2
 800112c:	0019      	movs	r1, r3
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <LL_RCC_SetAHBPrescaler+0x24>)
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	430a      	orrs	r2, r1
 8001134:	60da      	str	r2, [r3, #12]
}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	40021000 	.word	0x40021000

08001144 <LL_RCC_SetAPB1Prescaler>:
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <LL_RCC_SetAPB1Prescaler+0x24>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <LL_RCC_SetAPB1Prescaler+0x28>)
 8001152:	4013      	ands	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	430a      	orrs	r2, r1
 800115c:	60da      	str	r2, [r3, #12]
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	40021000 	.word	0x40021000
 800116c:	fffff8ff 	.word	0xfffff8ff

08001170 <LL_RCC_SetAPB2Prescaler>:
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <LL_RCC_SetAPB2Prescaler+0x24>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <LL_RCC_SetAPB2Prescaler+0x28>)
 800117e:	4013      	ands	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	430a      	orrs	r2, r1
 8001188:	60da      	str	r2, [r3, #12]
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	40021000 	.word	0x40021000
 8001198:	ffffc7ff 	.word	0xffffc7ff

0800119c <LL_RCC_SetUSARTClockSource>:
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80011a4:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	0c12      	lsrs	r2, r2, #16
 80011ac:	43d2      	mvns	r2, r2
 80011ae:	401a      	ands	r2, r3
 80011b0:	0011      	movs	r1, r2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	0c1a      	lsrs	r2, r3, #16
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <LL_RCC_SetUSARTClockSource+0x2c>)
 80011ba:	430a      	orrs	r2, r1
 80011bc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	40021000 	.word	0x40021000

080011cc <LL_APB1_GRP1_EnableClock>:
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80011d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	430a      	orrs	r2, r1
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <LL_APB1_GRP1_EnableClock+0x28>)
 80011e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4013      	ands	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40021000 	.word	0x40021000

080011f8 <LL_APB2_GRP1_EnableClock>:
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <LL_APB2_GRP1_EnableClock+0x28>)
 8001202:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <LL_APB2_GRP1_EnableClock+0x28>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	430a      	orrs	r2, r1
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <LL_APB2_GRP1_EnableClock+0x28>)
 800120e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4013      	ands	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b004      	add	sp, #16
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000

08001224 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <LL_FLASH_SetLatency+0x24>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	4393      	bics	r3, r2
 8001234:	0019      	movs	r1, r3
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <LL_FLASH_SetLatency+0x24>)
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40022000 	.word	0x40022000

0800124c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <LL_FLASH_GetLatency+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	4013      	ands	r3, r2
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	40022000 	.word	0x40022000

08001264 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b04      	cmp	r3, #4
 8001270:	d106      	bne.n	8001280 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <LL_SYSTICK_SetClkSource+0x30>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <LL_SYSTICK_SetClkSource+0x30>)
 8001278:	2104      	movs	r1, #4
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800127e:	e005      	b.n	800128c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <LL_SYSTICK_SetClkSource+0x30>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <LL_SYSTICK_SetClkSource+0x30>)
 8001286:	2104      	movs	r1, #4
 8001288:	438a      	bics	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}
 8001294:	e000e010 	.word	0xe000e010

08001298 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <LL_PWR_SetRegulVoltageScaling+0x28>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b002      	add	sp, #8
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40007000 	.word	0x40007000
 80012c0:	ffffe7ff 	.word	0xffffe7ff

080012c4 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b80      	cmp	r3, #128	; 0x80
 80012d6:	d101      	bne.n	80012dc <LL_USART_IsActiveFlag_TXE+0x18>
 80012d8:	2301      	movs	r3, #1
 80012da:	e000      	b.n	80012de <LL_USART_IsActiveFlag_TXE+0x1a>
 80012dc:	2300      	movs	r3, #0
}
 80012de:	0018      	movs	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2220      	movs	r2, #32
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b002      	add	sp, #8
 8001300:	bd80      	pop	{r7, pc}

08001302 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	000a      	movs	r2, r1
 800130c:	1cfb      	adds	r3, r7, #3
 800130e:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8001310:	1cfb      	adds	r3, r7, #3
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <LL_GPIO_SetOutputPin>:
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	619a      	str	r2, [r3, #24]
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}

08001338 <LL_GPIO_ResetOutputPin>:
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001356:	2001      	movs	r0, #1
 8001358:	f7ff ff4e 	bl	80011f8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	055b      	lsls	r3, r3, #21
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff ff33 	bl	80011cc <LL_APB1_GRP1_EnableClock>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001366:	f000 f881 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800136a:	f7ff fe1f 	bl	8000fac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800136e:	f000 faf9 	bl	8001964 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  getchInit();
 8001372:	f000 f935 	bl	80015e0 <getchInit>
  LL_USART_EnableIT_RXNE(USART2);
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <main+0x100>)
 8001378:	0018      	movs	r0, r3
 800137a:	f7ff ffb4 	bl	80012e6 <LL_USART_EnableIT_RXNE>
  printf("BARIL\r\n");
 800137e:	4b35      	ldr	r3, [pc, #212]	; (8001454 <main+0x104>)
 8001380:	0018      	movs	r0, r3
 8001382:	f000 fc43 	bl	8001c0c <puts>
  int flag = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	if (kbhit()) //if one char received on USART2
 800138a:	f000 f953 	bl	8001634 <kbhit>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d0fb      	beq.n	800138a <main+0x3a>


	 /* if(getch() == 'a')

	  else{*/
	  int car = getch();
 8001392:	f000 f92f 	bl	80015f4 <getch>
 8001396:	0003      	movs	r3, r0
 8001398:	607b      	str	r3, [r7, #4]
	  int num;
	  printf("Recu:%c\r\n", car);
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <main+0x108>)
 800139e:	0011      	movs	r1, r2
 80013a0:	0018      	movs	r0, r3
 80013a2:	f000 fbb9 	bl	8001b18 <iprintf>

	  if(car == 'a')
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b61      	cmp	r3, #97	; 0x61
 80013aa:	d10a      	bne.n	80013c2 <main+0x72>
	  {

		  LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin) ;
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	2120      	movs	r1, #32
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7ff ffb4 	bl	8001320 <LL_GPIO_SetOutputPin>
		  printf("LED ON\n\r");
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <main+0x10c>)
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 fbac 	bl	8001b18 <iprintf>
 80013c0:	e016      	b.n	80013f0 <main+0xa0>

	  }

	  else if(car == 'e')
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b65      	cmp	r3, #101	; 0x65
 80013c6:	d10a      	bne.n	80013de <main+0x8e>
	  {

		  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin) ;
 80013c8:	23a0      	movs	r3, #160	; 0xa0
 80013ca:	05db      	lsls	r3, r3, #23
 80013cc:	2120      	movs	r1, #32
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff ffb2 	bl	8001338 <LL_GPIO_ResetOutputPin>
		  printf("LED OFF\n\r");
 80013d4:	4b22      	ldr	r3, [pc, #136]	; (8001460 <main+0x110>)
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 fb9e 	bl	8001b18 <iprintf>
 80013dc:	e008      	b.n	80013f0 <main+0xa0>
	  }

	  else if(car == 'm')
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b6d      	cmp	r3, #109	; 0x6d
 80013e2:	d105      	bne.n	80013f0 <main+0xa0>
	  {

		  printf("pause de combien de temps ?\n\r");
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <main+0x114>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f000 fb96 	bl	8001b18 <iprintf>
		  flag = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]


	  }
	  if (flag == 1 )
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d1c9      	bne.n	800138a <main+0x3a>
	  {
		  num = getch();
 80013f6:	f000 f8fd 	bl	80015f4 <getch>
 80013fa:	0003      	movs	r3, r0
 80013fc:	60bb      	str	r3, [r7, #8]
		  num = (num+2)%10;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3302      	adds	r3, #2
 8001402:	210a      	movs	r1, #10
 8001404:	0018      	movs	r0, r3
 8001406:	f7fe ffef 	bl	80003e8 <__aeabi_idivmod>
 800140a:	000b      	movs	r3, r1
 800140c:	60bb      	str	r3, [r7, #8]

		  printf("%d\n\r", num);
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <main+0x118>)
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f000 fb7f 	bl	8001b18 <iprintf>
		  while(num > 0)
 800141a:	e00d      	b.n	8001438 <main+0xe8>
		  {
			  LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin) ;
 800141c:	23a0      	movs	r3, #160	; 0xa0
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	2120      	movs	r1, #32
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff ff7c 	bl	8001320 <LL_GPIO_SetOutputPin>
			  LL_mDelay(1000);
 8001428:	23fa      	movs	r3, #250	; 0xfa
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff fd0b 	bl	8000e48 <LL_mDelay>
			  num--;
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3b01      	subs	r3, #1
 8001436:	60bb      	str	r3, [r7, #8]
		  while(num > 0)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	dcee      	bgt.n	800141c <main+0xcc>

		  }
		  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin) ;
 800143e:	23a0      	movs	r3, #160	; 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	2120      	movs	r1, #32
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ff77 	bl	8001338 <LL_GPIO_ResetOutputPin>
		  flag = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
	if (kbhit()) //if one char received on USART2
 800144e:	e79c      	b.n	800138a <main+0x3a>
 8001450:	40004400 	.word	0x40004400
 8001454:	08002a34 	.word	0x08002a34
 8001458:	08002a3c 	.word	0x08002a3c
 800145c:	08002a48 	.word	0x08002a48
 8001460:	08002a54 	.word	0x08002a54
 8001464:	08002a60 	.word	0x08002a60
 8001468:	08002a80 	.word	0x08002a80

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fed7 	bl	8001224 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001476:	f7ff fee9 	bl	800124c <LL_FLASH_GetLatency>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x16>
  {
  Error_Handler();
 800147e:	f000 f85f 	bl	8001540 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff06 	bl	8001298 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800148c:	f7ff fdf2 	bl	8001074 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	f7ff fdfd 	bl	8001090 <LL_RCC_HSI_IsReady>
 8001496:	0003      	movs	r3, r0
 8001498:	2b01      	cmp	r3, #1
 800149a:	d1fa      	bne.n	8001492 <SystemClock_Config+0x26>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800149c:	2010      	movs	r0, #16
 800149e:	f7ff fe07 	bl	80010b0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f7ff fe3a 	bl	800111c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fe4b 	bl	8001144 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80014ae:	2000      	movs	r0, #0
 80014b0:	f7ff fe5e 	bl	8001170 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff fe11 	bl	80010dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	f7ff fe22 	bl	8001104 <LL_RCC_GetSysClkSource>
 80014c0:	0003      	movs	r3, r0
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	d1fa      	bne.n	80014bc <SystemClock_Config+0x50>
  {

  }

  LL_Init1msTick(16000000);
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <SystemClock_Config+0x80>)
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff fcad 	bl	8000e28 <LL_Init1msTick>

  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80014ce:	2004      	movs	r0, #4
 80014d0:	f7ff fec8 	bl	8001264 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(16000000);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <SystemClock_Config+0x80>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7ff fcd8 	bl	8000e8c <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80014dc:	23c0      	movs	r3, #192	; 0xc0
 80014de:	031b      	lsls	r3, r3, #12
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fe5b 	bl	800119c <LL_RCC_SetUSARTClockSource>
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	00f42400 	.word	0x00f42400

080014f0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file,char * ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  for (int i=0; i<len;i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e013      	b.n	800152a <_write+0x3a>
  {
    while(LL_USART_IsActiveFlag_TXE(USART2)==0);
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	4b0d      	ldr	r3, [pc, #52]	; (800153c <_write+0x4c>)
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fedc 	bl	80012c4 <LL_USART_IsActiveFlag_TXE>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d0f9      	beq.n	8001504 <_write+0x14>
    LL_USART_TransmitData8(USART2,*ptr);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4a09      	ldr	r2, [pc, #36]	; (800153c <_write+0x4c>)
 8001516:	0019      	movs	r1, r3
 8001518:	0010      	movs	r0, r2
 800151a:	f7ff fef2 	bl	8001302 <LL_USART_TransmitData8>
    ptr++;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	3301      	adds	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
  for (int i=0; i<len;i++)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbe7      	blt.n	8001502 <_write+0x12>
  }
return len;
 8001532:	687b      	ldr	r3, [r7, #4]
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b006      	add	sp, #24
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40004400 	.word	0x40004400

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <LL_USART_IsActiveFlag_RXNE>:
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2220      	movs	r2, #32
 8001558:	4013      	ands	r3, r2
 800155a:	2b20      	cmp	r3, #32
 800155c:	d101      	bne.n	8001562 <LL_USART_IsActiveFlag_RXNE+0x18>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001562:	2300      	movs	r3, #0
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}

0800156c <LL_USART_ReceiveData8>:
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	b2db      	uxtb	r3, r3
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}

08001582 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <HardFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a0:	46c0      	nop			; (mov r8, r8)
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(USART2))
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <USART2_IRQHandler+0x28>)
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff ffc7 	bl	800154a <LL_USART_IsActiveFlag_RXNE>
 80015bc:	1e03      	subs	r3, r0, #0
 80015be:	d007      	beq.n	80015d0 <USART2_IRQHandler+0x20>
  {
    g_rxCarUSART2=LL_USART_ReceiveData8(USART2);
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <USART2_IRQHandler+0x28>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff ffd2 	bl	800156c <LL_USART_ReceiveData8>
 80015c8:	0003      	movs	r3, r0
 80015ca:	001a      	movs	r2, r3
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <USART2_IRQHandler+0x2c>)
 80015ce:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */


  /* USER CODE END USART2_IRQn 1 */
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	40004400 	.word	0x40004400
 80015dc:	20000090 	.word	0x20000090

080015e0 <getchInit>:

/* USER CODE BEGIN 1 */
void getchInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	g_rxCarUSART2=255; //no char received
 80015e4:	4b02      	ldr	r3, [pc, #8]	; (80015f0 <getchInit+0x10>)
 80015e6:	22ff      	movs	r2, #255	; 0xff
 80015e8:	701a      	strb	r2, [r3, #0]
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000090 	.word	0x20000090

080015f4 <getch>:

//Return  a char received on UART2
// Wait if none received yet
uint8_t getch(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  volatile uint8_t l_car=1;
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
  do
  {
	if (g_rxCarUSART2==255)
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <getch+0x3c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2bff      	cmp	r3, #255	; 0xff
 8001606:	d100      	bne.n	800160a <getch+0x16>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001608:	bf30      	wfi
	{
	  __WFI(); //wait for interrupt (for a key ==> data RX)
	}
  }
  while(g_rxCarUSART2==255); //while no char received
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <getch+0x3c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2bff      	cmp	r3, #255	; 0xff
 8001610:	d0f6      	beq.n	8001600 <getch+0xc>

  l_car=g_rxCarUSART2; //save received data
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <getch+0x3c>)
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	701a      	strb	r2, [r3, #0]
  g_rxCarUSART2=255; //clear char received
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <getch+0x3c>)
 800161c:	22ff      	movs	r2, #255	; 0xff
 800161e:	701a      	strb	r2, [r3, #0]
  return l_car; //return received data
 8001620:	1dfb      	adds	r3, r7, #7
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b2db      	uxtb	r3, r3
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	20000090 	.word	0x20000090

08001634 <kbhit>:
//Return 1 if a char received on UART2
// else 0
int kbhit(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
 if(g_rxCarUSART2==255)
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <kbhit+0x18>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2bff      	cmp	r3, #255	; 0xff
 800163e:	d101      	bne.n	8001644 <kbhit+0x10>
   return 0;
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <kbhit+0x12>
 else
   return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000090 	.word	0x20000090

08001650 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e00a      	b.n	8001678 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001662:	e000      	b.n	8001666 <_read+0x16>
 8001664:	bf00      	nop
 8001666:	0001      	movs	r1, r0
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	b2ca      	uxtb	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbf0      	blt.n	8001662 <_read+0x12>
	}

return len;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b006      	add	sp, #24
 8001688:	bd80      	pop	{r7, pc}

0800168a <_close>:
	}
	return len;
}

int _close(int file)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
	return -1;
 8001692:	2301      	movs	r3, #1
 8001694:	425b      	negs	r3, r3
}
 8001696:	0018      	movs	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	b002      	add	sp, #8
 800169c:	bd80      	pop	{r7, pc}

0800169e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	0192      	lsls	r2, r2, #6
 80016ae:	605a      	str	r2, [r3, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	0018      	movs	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b002      	add	sp, #8
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
	return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x50>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x16>
		heap_end = &end;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <_sbrk+0x50>)
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <_sbrk+0x54>)
 80016f8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <_sbrk+0x50>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <_sbrk+0x50>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	18d3      	adds	r3, r2, r3
 8001708:	466a      	mov	r2, sp
 800170a:	4293      	cmp	r3, r2
 800170c:	d907      	bls.n	800171e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800170e:	f000 f9d1 	bl	8001ab4 <__errno>
 8001712:	0003      	movs	r3, r0
 8001714:	220c      	movs	r2, #12
 8001716:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001718:	2301      	movs	r3, #1
 800171a:	425b      	negs	r3, r3
 800171c:	e006      	b.n	800172c <_sbrk+0x48>
	}

	heap_end += incr;
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <_sbrk+0x50>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	18d2      	adds	r2, r2, r3
 8001726:	4b03      	ldr	r3, [pc, #12]	; (8001734 <_sbrk+0x50>)
 8001728:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000084 	.word	0x20000084
 8001738:	20000098 	.word	0x20000098

0800173c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <SystemInit+0x64>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <SystemInit+0x64>)
 8001746:	2180      	movs	r1, #128	; 0x80
 8001748:	0049      	lsls	r1, r1, #1
 800174a:	430a      	orrs	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <SystemInit+0x64>)
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <SystemInit+0x64>)
 8001754:	4913      	ldr	r1, [pc, #76]	; (80017a4 <SystemInit+0x68>)
 8001756:	400a      	ands	r2, r1
 8001758:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <SystemInit+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <SystemInit+0x64>)
 8001760:	4911      	ldr	r1, [pc, #68]	; (80017a8 <SystemInit+0x6c>)
 8001762:	400a      	ands	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <SystemInit+0x64>)
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <SystemInit+0x64>)
 800176c:	2101      	movs	r1, #1
 800176e:	438a      	bics	r2, r1
 8001770:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SystemInit+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <SystemInit+0x64>)
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <SystemInit+0x70>)
 800177a:	400a      	ands	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <SystemInit+0x64>)
 8001780:	68da      	ldr	r2, [r3, #12]
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <SystemInit+0x64>)
 8001784:	490a      	ldr	r1, [pc, #40]	; (80017b0 <SystemInit+0x74>)
 8001786:	400a      	ands	r2, r1
 8001788:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SystemInit+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <SystemInit+0x78>)
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	0512      	lsls	r2, r2, #20
 8001796:	609a      	str	r2, [r3, #8]
#endif
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	40021000 	.word	0x40021000
 80017a4:	88ff400c 	.word	0x88ff400c
 80017a8:	fef6fff6 	.word	0xfef6fff6
 80017ac:	fffbffff 	.word	0xfffbffff
 80017b0:	ff02ffff 	.word	0xff02ffff
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	1dfb      	adds	r3, r7, #7
 80017c2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	001a      	movs	r2, r3
 80017ca:	231f      	movs	r3, #31
 80017cc:	401a      	ands	r2, r3
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <NVIC_EnableIRQ+0x28>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	4091      	lsls	r1, r2
 80017d4:	000a      	movs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	0002      	movs	r2, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b7f      	cmp	r3, #127	; 0x7f
 80017f8:	d932      	bls.n	8001860 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017fa:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <NVIC_SetPriority+0xd4>)
 80017fc:	1dfb      	adds	r3, r7, #7
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	0019      	movs	r1, r3
 8001802:	230f      	movs	r3, #15
 8001804:	400b      	ands	r3, r1
 8001806:	3b08      	subs	r3, #8
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	3306      	adds	r3, #6
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	18d3      	adds	r3, r2, r3
 8001810:	3304      	adds	r3, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1dfa      	adds	r2, r7, #7
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	0011      	movs	r1, r2
 800181a:	2203      	movs	r2, #3
 800181c:	400a      	ands	r2, r1
 800181e:	00d2      	lsls	r2, r2, #3
 8001820:	21ff      	movs	r1, #255	; 0xff
 8001822:	4091      	lsls	r1, r2
 8001824:	000a      	movs	r2, r1
 8001826:	43d2      	mvns	r2, r2
 8001828:	401a      	ands	r2, r3
 800182a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	019b      	lsls	r3, r3, #6
 8001830:	22ff      	movs	r2, #255	; 0xff
 8001832:	401a      	ands	r2, r3
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	0018      	movs	r0, r3
 800183a:	2303      	movs	r3, #3
 800183c:	4003      	ands	r3, r0
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001842:	481d      	ldr	r0, [pc, #116]	; (80018b8 <NVIC_SetPriority+0xd4>)
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	001c      	movs	r4, r3
 800184a:	230f      	movs	r3, #15
 800184c:	4023      	ands	r3, r4
 800184e:	3b08      	subs	r3, #8
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	430a      	orrs	r2, r1
 8001854:	3306      	adds	r3, #6
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	18c3      	adds	r3, r0, r3
 800185a:	3304      	adds	r3, #4
 800185c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800185e:	e027      	b.n	80018b0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001860:	4a16      	ldr	r2, [pc, #88]	; (80018bc <NVIC_SetPriority+0xd8>)
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b25b      	sxtb	r3, r3
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	33c0      	adds	r3, #192	; 0xc0
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	589b      	ldr	r3, [r3, r2]
 8001870:	1dfa      	adds	r2, r7, #7
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	0011      	movs	r1, r2
 8001876:	2203      	movs	r2, #3
 8001878:	400a      	ands	r2, r1
 800187a:	00d2      	lsls	r2, r2, #3
 800187c:	21ff      	movs	r1, #255	; 0xff
 800187e:	4091      	lsls	r1, r2
 8001880:	000a      	movs	r2, r1
 8001882:	43d2      	mvns	r2, r2
 8001884:	401a      	ands	r2, r3
 8001886:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	019b      	lsls	r3, r3, #6
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	401a      	ands	r2, r3
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	0018      	movs	r0, r3
 8001896:	2303      	movs	r3, #3
 8001898:	4003      	ands	r3, r0
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189e:	4807      	ldr	r0, [pc, #28]	; (80018bc <NVIC_SetPriority+0xd8>)
 80018a0:	1dfb      	adds	r3, r7, #7
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	430a      	orrs	r2, r1
 80018aa:	33c0      	adds	r3, #192	; 0xc0
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	501a      	str	r2, [r3, r0]
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b003      	add	sp, #12
 80018b6:	bd90      	pop	{r4, r7, pc}
 80018b8:	e000ed00 	.word	0xe000ed00
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <LL_APB1_GRP1_EnableClock>:
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80018ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <LL_APB1_GRP1_EnableClock+0x28>)
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4013      	ands	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021000 	.word	0x40021000

080018ec <LL_IOP_GRP1_EnableClock>:
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <LL_IOP_GRP1_EnableClock+0x28>)
 80018f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <LL_IOP_GRP1_EnableClock+0x28>)
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <LL_IOP_GRP1_EnableClock+0x28>)
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <LL_USART_Enable>:
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2201      	movs	r2, #1
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	601a      	str	r2, [r3, #0]
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}

08001934 <LL_USART_ConfigAsyncMode>:
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <LL_USART_ConfigAsyncMode+0x2c>)
 8001942:	401a      	ands	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	222a      	movs	r2, #42	; 0x2a
 800194e:	4393      	bics	r3, r2
 8001950:	001a      	movs	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	609a      	str	r2, [r3, #8]
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	ffffb7ff 	.word	0xffffb7ff

08001964 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b08f      	sub	sp, #60	; 0x3c
 8001968:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800196a:	241c      	movs	r4, #28
 800196c:	193b      	adds	r3, r7, r4
 800196e:	0018      	movs	r0, r3
 8001970:	231c      	movs	r3, #28
 8001972:	001a      	movs	r2, r3
 8001974:	2100      	movs	r1, #0
 8001976:	f000 f8c7 	bl	8001b08 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	0018      	movs	r0, r3
 800197e:	2318      	movs	r3, #24
 8001980:	001a      	movs	r2, r3
 8001982:	2100      	movs	r1, #0
 8001984:	f000 f8c0 	bl	8001b08 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff ff97 	bl	80018c0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff ffaa 	bl	80018ec <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2204      	movs	r2, #4
 800199c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2202      	movs	r2, #2
 80019a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2203      	movs	r2, #3
 80019a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2204      	movs	r2, #4
 80019ba:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80019bc:	1d3a      	adds	r2, r7, #4
 80019be:	23a0      	movs	r3, #160	; 0xa0
 80019c0:	05db      	lsls	r3, r3, #23
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7fe fee0 	bl	800078a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = USART_RX_Pin;
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2208      	movs	r2, #8
 80019ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2202      	movs	r2, #2
 80019d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2203      	movs	r2, #3
 80019da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2204      	movs	r2, #4
 80019ec:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80019ee:	1d3a      	adds	r2, r7, #4
 80019f0:	23a0      	movs	r3, #160	; 0xa0
 80019f2:	05db      	lsls	r3, r3, #23
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe fec7 	bl	800078a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 80019fc:	2100      	movs	r1, #0
 80019fe:	201c      	movs	r0, #28
 8001a00:	f7ff fef0 	bl	80017e4 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8001a04:	201c      	movs	r0, #28
 8001a06:	f7ff fed7 	bl	80017b8 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8001a0a:	193b      	adds	r3, r7, r4
 8001a0c:	22e1      	movs	r2, #225	; 0xe1
 8001a0e:	0252      	lsls	r2, r2, #9
 8001a10:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a12:	0021      	movs	r1, r4
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	220c      	movs	r2, #12
 8001a2a:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a2c:	187b      	adds	r3, r7, r1
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a32:	187b      	adds	r3, r7, r1
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <MX_USART2_UART_Init+0xf8>)
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	0010      	movs	r0, r2
 8001a40:	f7ff f974 	bl	8000d2c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <MX_USART2_UART_Init+0xf8>)
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff ff74 	bl	8001934 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <MX_USART2_UART_Init+0xf8>)
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff ff62 	bl	8001918 <LL_USART_Enable>

}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b00f      	add	sp, #60	; 0x3c
 8001a5a:	bd90      	pop	{r4, r7, pc}
 8001a5c:	40004400 	.word	0x40004400

08001a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001a64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a66:	e003      	b.n	8001a70 <LoopCopyDataInit>

08001a68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001a6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a6e:	3104      	adds	r1, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a70:	480b      	ldr	r0, [pc, #44]	; (8001aa0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001a74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a78:	d3f6      	bcc.n	8001a68 <CopyDataInit>
  ldr  r2, =_sbss
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001a7c:	e002      	b.n	8001a84 <LoopFillZerobss>

08001a7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001a7e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001a80:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a82:	3204      	adds	r2, #4

08001a84 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <LoopForever+0x16>)
  cmp  r2, r3
 8001a86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a88:	d3f9      	bcc.n	8001a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a8a:	f7ff fe57 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f000 f817 	bl	8001ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a92:	f7ff fc5d 	bl	8001350 <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
  ldr   r0, =_estack
 8001a98:	20001fff 	.word	0x20001fff
  ldr  r3, =_sidata
 8001a9c:	08002b4c 	.word	0x08002b4c
  ldr  r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001aa4:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001aa8:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001aac:	20000098 	.word	0x20000098

08001ab0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_COMP_IRQHandler>
	...

08001ab4 <__errno>:
 8001ab4:	4b01      	ldr	r3, [pc, #4]	; (8001abc <__errno+0x8>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
 8001ab8:	4770      	bx	lr
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	20000004 	.word	0x20000004

08001ac0 <__libc_init_array>:
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	2600      	movs	r6, #0
 8001ac4:	4d0c      	ldr	r5, [pc, #48]	; (8001af8 <__libc_init_array+0x38>)
 8001ac6:	4c0d      	ldr	r4, [pc, #52]	; (8001afc <__libc_init_array+0x3c>)
 8001ac8:	1b64      	subs	r4, r4, r5
 8001aca:	10a4      	asrs	r4, r4, #2
 8001acc:	42a6      	cmp	r6, r4
 8001ace:	d109      	bne.n	8001ae4 <__libc_init_array+0x24>
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	f000 ffa3 	bl	8002a1c <_init>
 8001ad6:	4d0a      	ldr	r5, [pc, #40]	; (8001b00 <__libc_init_array+0x40>)
 8001ad8:	4c0a      	ldr	r4, [pc, #40]	; (8001b04 <__libc_init_array+0x44>)
 8001ada:	1b64      	subs	r4, r4, r5
 8001adc:	10a4      	asrs	r4, r4, #2
 8001ade:	42a6      	cmp	r6, r4
 8001ae0:	d105      	bne.n	8001aee <__libc_init_array+0x2e>
 8001ae2:	bd70      	pop	{r4, r5, r6, pc}
 8001ae4:	00b3      	lsls	r3, r6, #2
 8001ae6:	58eb      	ldr	r3, [r5, r3]
 8001ae8:	4798      	blx	r3
 8001aea:	3601      	adds	r6, #1
 8001aec:	e7ee      	b.n	8001acc <__libc_init_array+0xc>
 8001aee:	00b3      	lsls	r3, r6, #2
 8001af0:	58eb      	ldr	r3, [r5, r3]
 8001af2:	4798      	blx	r3
 8001af4:	3601      	adds	r6, #1
 8001af6:	e7f2      	b.n	8001ade <__libc_init_array+0x1e>
 8001af8:	08002b44 	.word	0x08002b44
 8001afc:	08002b44 	.word	0x08002b44
 8001b00:	08002b44 	.word	0x08002b44
 8001b04:	08002b48 	.word	0x08002b48

08001b08 <memset>:
 8001b08:	0003      	movs	r3, r0
 8001b0a:	1812      	adds	r2, r2, r0
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <memset+0xa>
 8001b10:	4770      	bx	lr
 8001b12:	7019      	strb	r1, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	e7f9      	b.n	8001b0c <memset+0x4>

08001b18 <iprintf>:
 8001b18:	b40f      	push	{r0, r1, r2, r3}
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <iprintf+0x30>)
 8001b1c:	b513      	push	{r0, r1, r4, lr}
 8001b1e:	681c      	ldr	r4, [r3, #0]
 8001b20:	2c00      	cmp	r4, #0
 8001b22:	d005      	beq.n	8001b30 <iprintf+0x18>
 8001b24:	69a3      	ldr	r3, [r4, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <iprintf+0x18>
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	f000 fa3c 	bl	8001fa8 <__sinit>
 8001b30:	ab05      	add	r3, sp, #20
 8001b32:	9a04      	ldr	r2, [sp, #16]
 8001b34:	68a1      	ldr	r1, [r4, #8]
 8001b36:	0020      	movs	r0, r4
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	f000 fc05 	bl	8002348 <_vfiprintf_r>
 8001b3e:	bc16      	pop	{r1, r2, r4}
 8001b40:	bc08      	pop	{r3}
 8001b42:	b004      	add	sp, #16
 8001b44:	4718      	bx	r3
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	20000004 	.word	0x20000004

08001b4c <_puts_r>:
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	0005      	movs	r5, r0
 8001b50:	000e      	movs	r6, r1
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d004      	beq.n	8001b60 <_puts_r+0x14>
 8001b56:	6983      	ldr	r3, [r0, #24]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <_puts_r+0x14>
 8001b5c:	f000 fa24 	bl	8001fa8 <__sinit>
 8001b60:	69ab      	ldr	r3, [r5, #24]
 8001b62:	68ac      	ldr	r4, [r5, #8]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_puts_r+0x22>
 8001b68:	0028      	movs	r0, r5
 8001b6a:	f000 fa1d 	bl	8001fa8 <__sinit>
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <_puts_r+0xb4>)
 8001b70:	429c      	cmp	r4, r3
 8001b72:	d10f      	bne.n	8001b94 <_puts_r+0x48>
 8001b74:	686c      	ldr	r4, [r5, #4]
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	071b      	lsls	r3, r3, #28
 8001b7a:	d502      	bpl.n	8001b82 <_puts_r+0x36>
 8001b7c:	6923      	ldr	r3, [r4, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11f      	bne.n	8001bc2 <_puts_r+0x76>
 8001b82:	0021      	movs	r1, r4
 8001b84:	0028      	movs	r0, r5
 8001b86:	f000 f8a1 	bl	8001ccc <__swsetup_r>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d019      	beq.n	8001bc2 <_puts_r+0x76>
 8001b8e:	2001      	movs	r0, #1
 8001b90:	4240      	negs	r0, r0
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <_puts_r+0xb8>)
 8001b96:	429c      	cmp	r4, r3
 8001b98:	d101      	bne.n	8001b9e <_puts_r+0x52>
 8001b9a:	68ac      	ldr	r4, [r5, #8]
 8001b9c:	e7eb      	b.n	8001b76 <_puts_r+0x2a>
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <_puts_r+0xbc>)
 8001ba0:	429c      	cmp	r4, r3
 8001ba2:	d1e8      	bne.n	8001b76 <_puts_r+0x2a>
 8001ba4:	68ec      	ldr	r4, [r5, #12]
 8001ba6:	e7e6      	b.n	8001b76 <_puts_r+0x2a>
 8001ba8:	3601      	adds	r6, #1
 8001baa:	60a3      	str	r3, [r4, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	da04      	bge.n	8001bba <_puts_r+0x6e>
 8001bb0:	69a2      	ldr	r2, [r4, #24]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dc16      	bgt.n	8001be4 <_puts_r+0x98>
 8001bb6:	290a      	cmp	r1, #10
 8001bb8:	d014      	beq.n	8001be4 <_puts_r+0x98>
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	6022      	str	r2, [r4, #0]
 8001bc0:	7019      	strb	r1, [r3, #0]
 8001bc2:	68a3      	ldr	r3, [r4, #8]
 8001bc4:	7831      	ldrb	r1, [r6, #0]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	2900      	cmp	r1, #0
 8001bca:	d1ed      	bne.n	8001ba8 <_puts_r+0x5c>
 8001bcc:	60a3      	str	r3, [r4, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da0f      	bge.n	8001bf2 <_puts_r+0xa6>
 8001bd2:	0022      	movs	r2, r4
 8001bd4:	310a      	adds	r1, #10
 8001bd6:	0028      	movs	r0, r5
 8001bd8:	f000 f822 	bl	8001c20 <__swbuf_r>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d0d6      	beq.n	8001b8e <_puts_r+0x42>
 8001be0:	200a      	movs	r0, #10
 8001be2:	e7d6      	b.n	8001b92 <_puts_r+0x46>
 8001be4:	0022      	movs	r2, r4
 8001be6:	0028      	movs	r0, r5
 8001be8:	f000 f81a 	bl	8001c20 <__swbuf_r>
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	d1e8      	bne.n	8001bc2 <_puts_r+0x76>
 8001bf0:	e7cd      	b.n	8001b8e <_puts_r+0x42>
 8001bf2:	200a      	movs	r0, #10
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	6022      	str	r2, [r4, #0]
 8001bfa:	7018      	strb	r0, [r3, #0]
 8001bfc:	e7c9      	b.n	8001b92 <_puts_r+0x46>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	08002ad0 	.word	0x08002ad0
 8001c04:	08002af0 	.word	0x08002af0
 8001c08:	08002ab0 	.word	0x08002ab0

08001c0c <puts>:
 8001c0c:	b510      	push	{r4, lr}
 8001c0e:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <puts+0x10>)
 8001c10:	0001      	movs	r1, r0
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	f7ff ff9a 	bl	8001b4c <_puts_r>
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	20000004 	.word	0x20000004

08001c20 <__swbuf_r>:
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	0005      	movs	r5, r0
 8001c24:	000e      	movs	r6, r1
 8001c26:	0014      	movs	r4, r2
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d004      	beq.n	8001c36 <__swbuf_r+0x16>
 8001c2c:	6983      	ldr	r3, [r0, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <__swbuf_r+0x16>
 8001c32:	f000 f9b9 	bl	8001fa8 <__sinit>
 8001c36:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <__swbuf_r+0xa0>)
 8001c38:	429c      	cmp	r4, r3
 8001c3a:	d12d      	bne.n	8001c98 <__swbuf_r+0x78>
 8001c3c:	686c      	ldr	r4, [r5, #4]
 8001c3e:	69a3      	ldr	r3, [r4, #24]
 8001c40:	60a3      	str	r3, [r4, #8]
 8001c42:	89a3      	ldrh	r3, [r4, #12]
 8001c44:	071b      	lsls	r3, r3, #28
 8001c46:	d531      	bpl.n	8001cac <__swbuf_r+0x8c>
 8001c48:	6923      	ldr	r3, [r4, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d02e      	beq.n	8001cac <__swbuf_r+0x8c>
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	6922      	ldr	r2, [r4, #16]
 8001c52:	b2f7      	uxtb	r7, r6
 8001c54:	1a98      	subs	r0, r3, r2
 8001c56:	6963      	ldr	r3, [r4, #20]
 8001c58:	b2f6      	uxtb	r6, r6
 8001c5a:	4283      	cmp	r3, r0
 8001c5c:	dc05      	bgt.n	8001c6a <__swbuf_r+0x4a>
 8001c5e:	0021      	movs	r1, r4
 8001c60:	0028      	movs	r0, r5
 8001c62:	f000 f933 	bl	8001ecc <_fflush_r>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d126      	bne.n	8001cb8 <__swbuf_r+0x98>
 8001c6a:	68a3      	ldr	r3, [r4, #8]
 8001c6c:	3001      	adds	r0, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	60a3      	str	r3, [r4, #8]
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	6022      	str	r2, [r4, #0]
 8001c78:	701f      	strb	r7, [r3, #0]
 8001c7a:	6963      	ldr	r3, [r4, #20]
 8001c7c:	4283      	cmp	r3, r0
 8001c7e:	d004      	beq.n	8001c8a <__swbuf_r+0x6a>
 8001c80:	89a3      	ldrh	r3, [r4, #12]
 8001c82:	07db      	lsls	r3, r3, #31
 8001c84:	d51a      	bpl.n	8001cbc <__swbuf_r+0x9c>
 8001c86:	2e0a      	cmp	r6, #10
 8001c88:	d118      	bne.n	8001cbc <__swbuf_r+0x9c>
 8001c8a:	0021      	movs	r1, r4
 8001c8c:	0028      	movs	r0, r5
 8001c8e:	f000 f91d 	bl	8001ecc <_fflush_r>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d012      	beq.n	8001cbc <__swbuf_r+0x9c>
 8001c96:	e00f      	b.n	8001cb8 <__swbuf_r+0x98>
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <__swbuf_r+0xa4>)
 8001c9a:	429c      	cmp	r4, r3
 8001c9c:	d101      	bne.n	8001ca2 <__swbuf_r+0x82>
 8001c9e:	68ac      	ldr	r4, [r5, #8]
 8001ca0:	e7cd      	b.n	8001c3e <__swbuf_r+0x1e>
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <__swbuf_r+0xa8>)
 8001ca4:	429c      	cmp	r4, r3
 8001ca6:	d1ca      	bne.n	8001c3e <__swbuf_r+0x1e>
 8001ca8:	68ec      	ldr	r4, [r5, #12]
 8001caa:	e7c8      	b.n	8001c3e <__swbuf_r+0x1e>
 8001cac:	0021      	movs	r1, r4
 8001cae:	0028      	movs	r0, r5
 8001cb0:	f000 f80c 	bl	8001ccc <__swsetup_r>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d0ca      	beq.n	8001c4e <__swbuf_r+0x2e>
 8001cb8:	2601      	movs	r6, #1
 8001cba:	4276      	negs	r6, r6
 8001cbc:	0030      	movs	r0, r6
 8001cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cc0:	08002ad0 	.word	0x08002ad0
 8001cc4:	08002af0 	.word	0x08002af0
 8001cc8:	08002ab0 	.word	0x08002ab0

08001ccc <__swsetup_r>:
 8001ccc:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <__swsetup_r+0xdc>)
 8001cce:	b570      	push	{r4, r5, r6, lr}
 8001cd0:	681d      	ldr	r5, [r3, #0]
 8001cd2:	0006      	movs	r6, r0
 8001cd4:	000c      	movs	r4, r1
 8001cd6:	2d00      	cmp	r5, #0
 8001cd8:	d005      	beq.n	8001ce6 <__swsetup_r+0x1a>
 8001cda:	69ab      	ldr	r3, [r5, #24]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <__swsetup_r+0x1a>
 8001ce0:	0028      	movs	r0, r5
 8001ce2:	f000 f961 	bl	8001fa8 <__sinit>
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <__swsetup_r+0xe0>)
 8001ce8:	429c      	cmp	r4, r3
 8001cea:	d10f      	bne.n	8001d0c <__swsetup_r+0x40>
 8001cec:	686c      	ldr	r4, [r5, #4]
 8001cee:	230c      	movs	r3, #12
 8001cf0:	5ee2      	ldrsh	r2, [r4, r3]
 8001cf2:	b293      	uxth	r3, r2
 8001cf4:	0719      	lsls	r1, r3, #28
 8001cf6:	d42d      	bmi.n	8001d54 <__swsetup_r+0x88>
 8001cf8:	06d9      	lsls	r1, r3, #27
 8001cfa:	d411      	bmi.n	8001d20 <__swsetup_r+0x54>
 8001cfc:	2309      	movs	r3, #9
 8001cfe:	2001      	movs	r0, #1
 8001d00:	6033      	str	r3, [r6, #0]
 8001d02:	3337      	adds	r3, #55	; 0x37
 8001d04:	4313      	orrs	r3, r2
 8001d06:	81a3      	strh	r3, [r4, #12]
 8001d08:	4240      	negs	r0, r0
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <__swsetup_r+0xe4>)
 8001d0e:	429c      	cmp	r4, r3
 8001d10:	d101      	bne.n	8001d16 <__swsetup_r+0x4a>
 8001d12:	68ac      	ldr	r4, [r5, #8]
 8001d14:	e7eb      	b.n	8001cee <__swsetup_r+0x22>
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <__swsetup_r+0xe8>)
 8001d18:	429c      	cmp	r4, r3
 8001d1a:	d1e8      	bne.n	8001cee <__swsetup_r+0x22>
 8001d1c:	68ec      	ldr	r4, [r5, #12]
 8001d1e:	e7e6      	b.n	8001cee <__swsetup_r+0x22>
 8001d20:	075b      	lsls	r3, r3, #29
 8001d22:	d513      	bpl.n	8001d4c <__swsetup_r+0x80>
 8001d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d26:	2900      	cmp	r1, #0
 8001d28:	d008      	beq.n	8001d3c <__swsetup_r+0x70>
 8001d2a:	0023      	movs	r3, r4
 8001d2c:	3344      	adds	r3, #68	; 0x44
 8001d2e:	4299      	cmp	r1, r3
 8001d30:	d002      	beq.n	8001d38 <__swsetup_r+0x6c>
 8001d32:	0030      	movs	r0, r6
 8001d34:	f000 fa38 	bl	80021a8 <_free_r>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8001d3c:	2224      	movs	r2, #36	; 0x24
 8001d3e:	89a3      	ldrh	r3, [r4, #12]
 8001d40:	4393      	bics	r3, r2
 8001d42:	81a3      	strh	r3, [r4, #12]
 8001d44:	2300      	movs	r3, #0
 8001d46:	6063      	str	r3, [r4, #4]
 8001d48:	6923      	ldr	r3, [r4, #16]
 8001d4a:	6023      	str	r3, [r4, #0]
 8001d4c:	2308      	movs	r3, #8
 8001d4e:	89a2      	ldrh	r2, [r4, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	81a3      	strh	r3, [r4, #12]
 8001d54:	6923      	ldr	r3, [r4, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10b      	bne.n	8001d72 <__swsetup_r+0xa6>
 8001d5a:	21a0      	movs	r1, #160	; 0xa0
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	89a3      	ldrh	r3, [r4, #12]
 8001d60:	0089      	lsls	r1, r1, #2
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	400b      	ands	r3, r1
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <__swsetup_r+0xa6>
 8001d6a:	0021      	movs	r1, r4
 8001d6c:	0030      	movs	r0, r6
 8001d6e:	f000 f9d7 	bl	8002120 <__smakebuf_r>
 8001d72:	2301      	movs	r3, #1
 8001d74:	89a2      	ldrh	r2, [r4, #12]
 8001d76:	4013      	ands	r3, r2
 8001d78:	d011      	beq.n	8001d9e <__swsetup_r+0xd2>
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60a3      	str	r3, [r4, #8]
 8001d7e:	6963      	ldr	r3, [r4, #20]
 8001d80:	425b      	negs	r3, r3
 8001d82:	61a3      	str	r3, [r4, #24]
 8001d84:	2000      	movs	r0, #0
 8001d86:	6923      	ldr	r3, [r4, #16]
 8001d88:	4283      	cmp	r3, r0
 8001d8a:	d1be      	bne.n	8001d0a <__swsetup_r+0x3e>
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	5ee2      	ldrsh	r2, [r4, r3]
 8001d90:	0613      	lsls	r3, r2, #24
 8001d92:	d5ba      	bpl.n	8001d0a <__swsetup_r+0x3e>
 8001d94:	2340      	movs	r3, #64	; 0x40
 8001d96:	4313      	orrs	r3, r2
 8001d98:	81a3      	strh	r3, [r4, #12]
 8001d9a:	3801      	subs	r0, #1
 8001d9c:	e7b5      	b.n	8001d0a <__swsetup_r+0x3e>
 8001d9e:	0792      	lsls	r2, r2, #30
 8001da0:	d400      	bmi.n	8001da4 <__swsetup_r+0xd8>
 8001da2:	6963      	ldr	r3, [r4, #20]
 8001da4:	60a3      	str	r3, [r4, #8]
 8001da6:	e7ed      	b.n	8001d84 <__swsetup_r+0xb8>
 8001da8:	20000004 	.word	0x20000004
 8001dac:	08002ad0 	.word	0x08002ad0
 8001db0:	08002af0 	.word	0x08002af0
 8001db4:	08002ab0 	.word	0x08002ab0

08001db8 <__sflush_r>:
 8001db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dba:	898a      	ldrh	r2, [r1, #12]
 8001dbc:	0005      	movs	r5, r0
 8001dbe:	000c      	movs	r4, r1
 8001dc0:	0713      	lsls	r3, r2, #28
 8001dc2:	d460      	bmi.n	8001e86 <__sflush_r+0xce>
 8001dc4:	684b      	ldr	r3, [r1, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dc04      	bgt.n	8001dd4 <__sflush_r+0x1c>
 8001dca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	dc01      	bgt.n	8001dd4 <__sflush_r+0x1c>
 8001dd0:	2000      	movs	r0, #0
 8001dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001dd4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001dd6:	2f00      	cmp	r7, #0
 8001dd8:	d0fa      	beq.n	8001dd0 <__sflush_r+0x18>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	682e      	ldr	r6, [r5, #0]
 8001dde:	602b      	str	r3, [r5, #0]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	015b      	lsls	r3, r3, #5
 8001de4:	6a21      	ldr	r1, [r4, #32]
 8001de6:	401a      	ands	r2, r3
 8001de8:	d034      	beq.n	8001e54 <__sflush_r+0x9c>
 8001dea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001dec:	89a3      	ldrh	r3, [r4, #12]
 8001dee:	075b      	lsls	r3, r3, #29
 8001df0:	d506      	bpl.n	8001e00 <__sflush_r+0x48>
 8001df2:	6863      	ldr	r3, [r4, #4]
 8001df4:	1ac0      	subs	r0, r0, r3
 8001df6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <__sflush_r+0x48>
 8001dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dfe:	1ac0      	subs	r0, r0, r3
 8001e00:	0002      	movs	r2, r0
 8001e02:	6a21      	ldr	r1, [r4, #32]
 8001e04:	2300      	movs	r3, #0
 8001e06:	0028      	movs	r0, r5
 8001e08:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001e0a:	47b8      	blx	r7
 8001e0c:	89a1      	ldrh	r1, [r4, #12]
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	d106      	bne.n	8001e20 <__sflush_r+0x68>
 8001e12:	682b      	ldr	r3, [r5, #0]
 8001e14:	2b1d      	cmp	r3, #29
 8001e16:	d830      	bhi.n	8001e7a <__sflush_r+0xc2>
 8001e18:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <__sflush_r+0x110>)
 8001e1a:	40da      	lsrs	r2, r3
 8001e1c:	07d3      	lsls	r3, r2, #31
 8001e1e:	d52c      	bpl.n	8001e7a <__sflush_r+0xc2>
 8001e20:	2300      	movs	r3, #0
 8001e22:	6063      	str	r3, [r4, #4]
 8001e24:	6923      	ldr	r3, [r4, #16]
 8001e26:	6023      	str	r3, [r4, #0]
 8001e28:	04cb      	lsls	r3, r1, #19
 8001e2a:	d505      	bpl.n	8001e38 <__sflush_r+0x80>
 8001e2c:	1c43      	adds	r3, r0, #1
 8001e2e:	d102      	bne.n	8001e36 <__sflush_r+0x7e>
 8001e30:	682b      	ldr	r3, [r5, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d100      	bne.n	8001e38 <__sflush_r+0x80>
 8001e36:	6560      	str	r0, [r4, #84]	; 0x54
 8001e38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e3a:	602e      	str	r6, [r5, #0]
 8001e3c:	2900      	cmp	r1, #0
 8001e3e:	d0c7      	beq.n	8001dd0 <__sflush_r+0x18>
 8001e40:	0023      	movs	r3, r4
 8001e42:	3344      	adds	r3, #68	; 0x44
 8001e44:	4299      	cmp	r1, r3
 8001e46:	d002      	beq.n	8001e4e <__sflush_r+0x96>
 8001e48:	0028      	movs	r0, r5
 8001e4a:	f000 f9ad 	bl	80021a8 <_free_r>
 8001e4e:	2000      	movs	r0, #0
 8001e50:	6360      	str	r0, [r4, #52]	; 0x34
 8001e52:	e7be      	b.n	8001dd2 <__sflush_r+0x1a>
 8001e54:	2301      	movs	r3, #1
 8001e56:	0028      	movs	r0, r5
 8001e58:	47b8      	blx	r7
 8001e5a:	1c43      	adds	r3, r0, #1
 8001e5c:	d1c6      	bne.n	8001dec <__sflush_r+0x34>
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0c3      	beq.n	8001dec <__sflush_r+0x34>
 8001e64:	2b1d      	cmp	r3, #29
 8001e66:	d001      	beq.n	8001e6c <__sflush_r+0xb4>
 8001e68:	2b16      	cmp	r3, #22
 8001e6a:	d101      	bne.n	8001e70 <__sflush_r+0xb8>
 8001e6c:	602e      	str	r6, [r5, #0]
 8001e6e:	e7af      	b.n	8001dd0 <__sflush_r+0x18>
 8001e70:	2340      	movs	r3, #64	; 0x40
 8001e72:	89a2      	ldrh	r2, [r4, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	81a3      	strh	r3, [r4, #12]
 8001e78:	e7ab      	b.n	8001dd2 <__sflush_r+0x1a>
 8001e7a:	2340      	movs	r3, #64	; 0x40
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	2001      	movs	r0, #1
 8001e80:	81a3      	strh	r3, [r4, #12]
 8001e82:	4240      	negs	r0, r0
 8001e84:	e7a5      	b.n	8001dd2 <__sflush_r+0x1a>
 8001e86:	690f      	ldr	r7, [r1, #16]
 8001e88:	2f00      	cmp	r7, #0
 8001e8a:	d0a1      	beq.n	8001dd0 <__sflush_r+0x18>
 8001e8c:	680b      	ldr	r3, [r1, #0]
 8001e8e:	600f      	str	r7, [r1, #0]
 8001e90:	1bdb      	subs	r3, r3, r7
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2300      	movs	r3, #0
 8001e96:	0792      	lsls	r2, r2, #30
 8001e98:	d100      	bne.n	8001e9c <__sflush_r+0xe4>
 8001e9a:	694b      	ldr	r3, [r1, #20]
 8001e9c:	60a3      	str	r3, [r4, #8]
 8001e9e:	9b01      	ldr	r3, [sp, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dc00      	bgt.n	8001ea6 <__sflush_r+0xee>
 8001ea4:	e794      	b.n	8001dd0 <__sflush_r+0x18>
 8001ea6:	9b01      	ldr	r3, [sp, #4]
 8001ea8:	003a      	movs	r2, r7
 8001eaa:	6a21      	ldr	r1, [r4, #32]
 8001eac:	0028      	movs	r0, r5
 8001eae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001eb0:	47b0      	blx	r6
 8001eb2:	2800      	cmp	r0, #0
 8001eb4:	dc03      	bgt.n	8001ebe <__sflush_r+0x106>
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	89a2      	ldrh	r2, [r4, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	e7df      	b.n	8001e7e <__sflush_r+0xc6>
 8001ebe:	9b01      	ldr	r3, [sp, #4]
 8001ec0:	183f      	adds	r7, r7, r0
 8001ec2:	1a1b      	subs	r3, r3, r0
 8001ec4:	9301      	str	r3, [sp, #4]
 8001ec6:	e7ea      	b.n	8001e9e <__sflush_r+0xe6>
 8001ec8:	20400001 	.word	0x20400001

08001ecc <_fflush_r>:
 8001ecc:	690b      	ldr	r3, [r1, #16]
 8001ece:	b570      	push	{r4, r5, r6, lr}
 8001ed0:	0005      	movs	r5, r0
 8001ed2:	000c      	movs	r4, r1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <_fflush_r+0x10>
 8001ed8:	2000      	movs	r0, #0
 8001eda:	bd70      	pop	{r4, r5, r6, pc}
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d004      	beq.n	8001eea <_fflush_r+0x1e>
 8001ee0:	6983      	ldr	r3, [r0, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <_fflush_r+0x1e>
 8001ee6:	f000 f85f 	bl	8001fa8 <__sinit>
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <_fflush_r+0x4c>)
 8001eec:	429c      	cmp	r4, r3
 8001eee:	d109      	bne.n	8001f04 <_fflush_r+0x38>
 8001ef0:	686c      	ldr	r4, [r5, #4]
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	5ea3      	ldrsh	r3, [r4, r2]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0ee      	beq.n	8001ed8 <_fflush_r+0xc>
 8001efa:	0021      	movs	r1, r4
 8001efc:	0028      	movs	r0, r5
 8001efe:	f7ff ff5b 	bl	8001db8 <__sflush_r>
 8001f02:	e7ea      	b.n	8001eda <_fflush_r+0xe>
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <_fflush_r+0x50>)
 8001f06:	429c      	cmp	r4, r3
 8001f08:	d101      	bne.n	8001f0e <_fflush_r+0x42>
 8001f0a:	68ac      	ldr	r4, [r5, #8]
 8001f0c:	e7f1      	b.n	8001ef2 <_fflush_r+0x26>
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <_fflush_r+0x54>)
 8001f10:	429c      	cmp	r4, r3
 8001f12:	d1ee      	bne.n	8001ef2 <_fflush_r+0x26>
 8001f14:	68ec      	ldr	r4, [r5, #12]
 8001f16:	e7ec      	b.n	8001ef2 <_fflush_r+0x26>
 8001f18:	08002ad0 	.word	0x08002ad0
 8001f1c:	08002af0 	.word	0x08002af0
 8001f20:	08002ab0 	.word	0x08002ab0

08001f24 <std>:
 8001f24:	2300      	movs	r3, #0
 8001f26:	b510      	push	{r4, lr}
 8001f28:	0004      	movs	r4, r0
 8001f2a:	6003      	str	r3, [r0, #0]
 8001f2c:	6043      	str	r3, [r0, #4]
 8001f2e:	6083      	str	r3, [r0, #8]
 8001f30:	8181      	strh	r1, [r0, #12]
 8001f32:	6643      	str	r3, [r0, #100]	; 0x64
 8001f34:	81c2      	strh	r2, [r0, #14]
 8001f36:	6103      	str	r3, [r0, #16]
 8001f38:	6143      	str	r3, [r0, #20]
 8001f3a:	6183      	str	r3, [r0, #24]
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	2208      	movs	r2, #8
 8001f40:	305c      	adds	r0, #92	; 0x5c
 8001f42:	f7ff fde1 	bl	8001b08 <memset>
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <std+0x38>)
 8001f48:	6224      	str	r4, [r4, #32]
 8001f4a:	6263      	str	r3, [r4, #36]	; 0x24
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <std+0x3c>)
 8001f4e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <std+0x40>)
 8001f52:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <std+0x44>)
 8001f56:	6323      	str	r3, [r4, #48]	; 0x30
 8001f58:	bd10      	pop	{r4, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	08002885 	.word	0x08002885
 8001f60:	080028ad 	.word	0x080028ad
 8001f64:	080028e5 	.word	0x080028e5
 8001f68:	08002911 	.word	0x08002911

08001f6c <_cleanup_r>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	4902      	ldr	r1, [pc, #8]	; (8001f78 <_cleanup_r+0xc>)
 8001f70:	f000 f88c 	bl	800208c <_fwalk_reent>
 8001f74:	bd10      	pop	{r4, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	08001ecd 	.word	0x08001ecd

08001f7c <__sfmoreglue>:
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	2568      	movs	r5, #104	; 0x68
 8001f80:	1e4a      	subs	r2, r1, #1
 8001f82:	4355      	muls	r5, r2
 8001f84:	000e      	movs	r6, r1
 8001f86:	0029      	movs	r1, r5
 8001f88:	3174      	adds	r1, #116	; 0x74
 8001f8a:	f000 f957 	bl	800223c <_malloc_r>
 8001f8e:	1e04      	subs	r4, r0, #0
 8001f90:	d008      	beq.n	8001fa4 <__sfmoreglue+0x28>
 8001f92:	2100      	movs	r1, #0
 8001f94:	002a      	movs	r2, r5
 8001f96:	6001      	str	r1, [r0, #0]
 8001f98:	6046      	str	r6, [r0, #4]
 8001f9a:	300c      	adds	r0, #12
 8001f9c:	60a0      	str	r0, [r4, #8]
 8001f9e:	3268      	adds	r2, #104	; 0x68
 8001fa0:	f7ff fdb2 	bl	8001b08 <memset>
 8001fa4:	0020      	movs	r0, r4
 8001fa6:	bd70      	pop	{r4, r5, r6, pc}

08001fa8 <__sinit>:
 8001fa8:	6983      	ldr	r3, [r0, #24]
 8001faa:	b513      	push	{r0, r1, r4, lr}
 8001fac:	0004      	movs	r4, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d128      	bne.n	8002004 <__sinit+0x5c>
 8001fb2:	6483      	str	r3, [r0, #72]	; 0x48
 8001fb4:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001fb6:	6503      	str	r3, [r0, #80]	; 0x50
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <__sinit+0x60>)
 8001fba:	4a14      	ldr	r2, [pc, #80]	; (800200c <__sinit+0x64>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6282      	str	r2, [r0, #40]	; 0x28
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	4298      	cmp	r0, r3
 8001fc4:	d101      	bne.n	8001fca <__sinit+0x22>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	6183      	str	r3, [r0, #24]
 8001fca:	0020      	movs	r0, r4
 8001fcc:	f000 f820 	bl	8002010 <__sfp>
 8001fd0:	6060      	str	r0, [r4, #4]
 8001fd2:	0020      	movs	r0, r4
 8001fd4:	f000 f81c 	bl	8002010 <__sfp>
 8001fd8:	60a0      	str	r0, [r4, #8]
 8001fda:	0020      	movs	r0, r4
 8001fdc:	f000 f818 	bl	8002010 <__sfp>
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60e0      	str	r0, [r4, #12]
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	6860      	ldr	r0, [r4, #4]
 8001fe8:	f7ff ff9c 	bl	8001f24 <std>
 8001fec:	2201      	movs	r2, #1
 8001fee:	2109      	movs	r1, #9
 8001ff0:	68a0      	ldr	r0, [r4, #8]
 8001ff2:	f7ff ff97 	bl	8001f24 <std>
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	2112      	movs	r1, #18
 8001ffa:	68e0      	ldr	r0, [r4, #12]
 8001ffc:	f7ff ff92 	bl	8001f24 <std>
 8002000:	2301      	movs	r3, #1
 8002002:	61a3      	str	r3, [r4, #24]
 8002004:	bd13      	pop	{r0, r1, r4, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	08002aac 	.word	0x08002aac
 800200c:	08001f6d 	.word	0x08001f6d

08002010 <__sfp>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <__sfp+0x74>)
 8002014:	0007      	movs	r7, r0
 8002016:	681e      	ldr	r6, [r3, #0]
 8002018:	69b3      	ldr	r3, [r6, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <__sfp+0x14>
 800201e:	0030      	movs	r0, r6
 8002020:	f7ff ffc2 	bl	8001fa8 <__sinit>
 8002024:	3648      	adds	r6, #72	; 0x48
 8002026:	68b4      	ldr	r4, [r6, #8]
 8002028:	6873      	ldr	r3, [r6, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	d504      	bpl.n	8002038 <__sfp+0x28>
 800202e:	6833      	ldr	r3, [r6, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <__sfp+0x34>
 8002034:	6836      	ldr	r6, [r6, #0]
 8002036:	e7f6      	b.n	8002026 <__sfp+0x16>
 8002038:	220c      	movs	r2, #12
 800203a:	5ea5      	ldrsh	r5, [r4, r2]
 800203c:	2d00      	cmp	r5, #0
 800203e:	d00d      	beq.n	800205c <__sfp+0x4c>
 8002040:	3468      	adds	r4, #104	; 0x68
 8002042:	e7f2      	b.n	800202a <__sfp+0x1a>
 8002044:	2104      	movs	r1, #4
 8002046:	0038      	movs	r0, r7
 8002048:	f7ff ff98 	bl	8001f7c <__sfmoreglue>
 800204c:	6030      	str	r0, [r6, #0]
 800204e:	2800      	cmp	r0, #0
 8002050:	d1f0      	bne.n	8002034 <__sfp+0x24>
 8002052:	230c      	movs	r3, #12
 8002054:	0004      	movs	r4, r0
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	0020      	movs	r0, r4
 800205a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800205c:	0020      	movs	r0, r4
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <__sfp+0x78>)
 8002060:	6665      	str	r5, [r4, #100]	; 0x64
 8002062:	6025      	str	r5, [r4, #0]
 8002064:	6065      	str	r5, [r4, #4]
 8002066:	60a5      	str	r5, [r4, #8]
 8002068:	60e3      	str	r3, [r4, #12]
 800206a:	6125      	str	r5, [r4, #16]
 800206c:	6165      	str	r5, [r4, #20]
 800206e:	61a5      	str	r5, [r4, #24]
 8002070:	2208      	movs	r2, #8
 8002072:	0029      	movs	r1, r5
 8002074:	305c      	adds	r0, #92	; 0x5c
 8002076:	f7ff fd47 	bl	8001b08 <memset>
 800207a:	6365      	str	r5, [r4, #52]	; 0x34
 800207c:	63a5      	str	r5, [r4, #56]	; 0x38
 800207e:	64a5      	str	r5, [r4, #72]	; 0x48
 8002080:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002082:	e7e9      	b.n	8002058 <__sfp+0x48>
 8002084:	08002aac 	.word	0x08002aac
 8002088:	ffff0001 	.word	0xffff0001

0800208c <_fwalk_reent>:
 800208c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800208e:	0004      	movs	r4, r0
 8002090:	0007      	movs	r7, r0
 8002092:	2600      	movs	r6, #0
 8002094:	9101      	str	r1, [sp, #4]
 8002096:	3448      	adds	r4, #72	; 0x48
 8002098:	2c00      	cmp	r4, #0
 800209a:	d101      	bne.n	80020a0 <_fwalk_reent+0x14>
 800209c:	0030      	movs	r0, r6
 800209e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020a0:	6863      	ldr	r3, [r4, #4]
 80020a2:	68a5      	ldr	r5, [r4, #8]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	9b00      	ldr	r3, [sp, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	d501      	bpl.n	80020b2 <_fwalk_reent+0x26>
 80020ae:	6824      	ldr	r4, [r4, #0]
 80020b0:	e7f2      	b.n	8002098 <_fwalk_reent+0xc>
 80020b2:	89ab      	ldrh	r3, [r5, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d908      	bls.n	80020ca <_fwalk_reent+0x3e>
 80020b8:	220e      	movs	r2, #14
 80020ba:	5eab      	ldrsh	r3, [r5, r2]
 80020bc:	3301      	adds	r3, #1
 80020be:	d004      	beq.n	80020ca <_fwalk_reent+0x3e>
 80020c0:	0029      	movs	r1, r5
 80020c2:	0038      	movs	r0, r7
 80020c4:	9b01      	ldr	r3, [sp, #4]
 80020c6:	4798      	blx	r3
 80020c8:	4306      	orrs	r6, r0
 80020ca:	3568      	adds	r5, #104	; 0x68
 80020cc:	e7eb      	b.n	80020a6 <_fwalk_reent+0x1a>
	...

080020d0 <__swhatbuf_r>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	000e      	movs	r6, r1
 80020d4:	001d      	movs	r5, r3
 80020d6:	230e      	movs	r3, #14
 80020d8:	5ec9      	ldrsh	r1, [r1, r3]
 80020da:	b096      	sub	sp, #88	; 0x58
 80020dc:	0014      	movs	r4, r2
 80020de:	2900      	cmp	r1, #0
 80020e0:	da07      	bge.n	80020f2 <__swhatbuf_r+0x22>
 80020e2:	2300      	movs	r3, #0
 80020e4:	602b      	str	r3, [r5, #0]
 80020e6:	89b3      	ldrh	r3, [r6, #12]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	d411      	bmi.n	8002110 <__swhatbuf_r+0x40>
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	e00f      	b.n	8002112 <__swhatbuf_r+0x42>
 80020f2:	466a      	mov	r2, sp
 80020f4:	f000 fc38 	bl	8002968 <_fstat_r>
 80020f8:	2800      	cmp	r0, #0
 80020fa:	dbf2      	blt.n	80020e2 <__swhatbuf_r+0x12>
 80020fc:	22f0      	movs	r2, #240	; 0xf0
 80020fe:	9b01      	ldr	r3, [sp, #4]
 8002100:	0212      	lsls	r2, r2, #8
 8002102:	4013      	ands	r3, r2
 8002104:	4a05      	ldr	r2, [pc, #20]	; (800211c <__swhatbuf_r+0x4c>)
 8002106:	189b      	adds	r3, r3, r2
 8002108:	425a      	negs	r2, r3
 800210a:	4153      	adcs	r3, r2
 800210c:	602b      	str	r3, [r5, #0]
 800210e:	e7ed      	b.n	80020ec <__swhatbuf_r+0x1c>
 8002110:	2340      	movs	r3, #64	; 0x40
 8002112:	2000      	movs	r0, #0
 8002114:	6023      	str	r3, [r4, #0]
 8002116:	b016      	add	sp, #88	; 0x58
 8002118:	bd70      	pop	{r4, r5, r6, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	ffffe000 	.word	0xffffe000

08002120 <__smakebuf_r>:
 8002120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002122:	2602      	movs	r6, #2
 8002124:	898b      	ldrh	r3, [r1, #12]
 8002126:	0005      	movs	r5, r0
 8002128:	000c      	movs	r4, r1
 800212a:	4233      	tst	r3, r6
 800212c:	d006      	beq.n	800213c <__smakebuf_r+0x1c>
 800212e:	0023      	movs	r3, r4
 8002130:	3347      	adds	r3, #71	; 0x47
 8002132:	6023      	str	r3, [r4, #0]
 8002134:	6123      	str	r3, [r4, #16]
 8002136:	2301      	movs	r3, #1
 8002138:	6163      	str	r3, [r4, #20]
 800213a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800213c:	ab01      	add	r3, sp, #4
 800213e:	466a      	mov	r2, sp
 8002140:	f7ff ffc6 	bl	80020d0 <__swhatbuf_r>
 8002144:	9900      	ldr	r1, [sp, #0]
 8002146:	0007      	movs	r7, r0
 8002148:	0028      	movs	r0, r5
 800214a:	f000 f877 	bl	800223c <_malloc_r>
 800214e:	2800      	cmp	r0, #0
 8002150:	d108      	bne.n	8002164 <__smakebuf_r+0x44>
 8002152:	220c      	movs	r2, #12
 8002154:	5ea3      	ldrsh	r3, [r4, r2]
 8002156:	059a      	lsls	r2, r3, #22
 8002158:	d4ef      	bmi.n	800213a <__smakebuf_r+0x1a>
 800215a:	2203      	movs	r2, #3
 800215c:	4393      	bics	r3, r2
 800215e:	431e      	orrs	r6, r3
 8002160:	81a6      	strh	r6, [r4, #12]
 8002162:	e7e4      	b.n	800212e <__smakebuf_r+0xe>
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <__smakebuf_r+0x84>)
 8002166:	62ab      	str	r3, [r5, #40]	; 0x28
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	89a2      	ldrh	r2, [r4, #12]
 800216c:	6020      	str	r0, [r4, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	81a3      	strh	r3, [r4, #12]
 8002172:	9b00      	ldr	r3, [sp, #0]
 8002174:	6120      	str	r0, [r4, #16]
 8002176:	6163      	str	r3, [r4, #20]
 8002178:	9b01      	ldr	r3, [sp, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00d      	beq.n	800219a <__smakebuf_r+0x7a>
 800217e:	230e      	movs	r3, #14
 8002180:	5ee1      	ldrsh	r1, [r4, r3]
 8002182:	0028      	movs	r0, r5
 8002184:	f000 fc02 	bl	800298c <_isatty_r>
 8002188:	2800      	cmp	r0, #0
 800218a:	d006      	beq.n	800219a <__smakebuf_r+0x7a>
 800218c:	2203      	movs	r2, #3
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	4393      	bics	r3, r2
 8002192:	001a      	movs	r2, r3
 8002194:	2301      	movs	r3, #1
 8002196:	4313      	orrs	r3, r2
 8002198:	81a3      	strh	r3, [r4, #12]
 800219a:	89a0      	ldrh	r0, [r4, #12]
 800219c:	4338      	orrs	r0, r7
 800219e:	81a0      	strh	r0, [r4, #12]
 80021a0:	e7cb      	b.n	800213a <__smakebuf_r+0x1a>
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	08001f6d 	.word	0x08001f6d

080021a8 <_free_r>:
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	0005      	movs	r5, r0
 80021ac:	2900      	cmp	r1, #0
 80021ae:	d010      	beq.n	80021d2 <_free_r+0x2a>
 80021b0:	1f0c      	subs	r4, r1, #4
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	da00      	bge.n	80021ba <_free_r+0x12>
 80021b8:	18e4      	adds	r4, r4, r3
 80021ba:	0028      	movs	r0, r5
 80021bc:	f000 fc17 	bl	80029ee <__malloc_lock>
 80021c0:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <_free_r+0x90>)
 80021c2:	6813      	ldr	r3, [r2, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d105      	bne.n	80021d4 <_free_r+0x2c>
 80021c8:	6063      	str	r3, [r4, #4]
 80021ca:	6014      	str	r4, [r2, #0]
 80021cc:	0028      	movs	r0, r5
 80021ce:	f000 fc0f 	bl	80029f0 <__malloc_unlock>
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
 80021d4:	42a3      	cmp	r3, r4
 80021d6:	d909      	bls.n	80021ec <_free_r+0x44>
 80021d8:	6821      	ldr	r1, [r4, #0]
 80021da:	1860      	adds	r0, r4, r1
 80021dc:	4283      	cmp	r3, r0
 80021de:	d1f3      	bne.n	80021c8 <_free_r+0x20>
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	1841      	adds	r1, r0, r1
 80021e6:	6021      	str	r1, [r4, #0]
 80021e8:	e7ee      	b.n	80021c8 <_free_r+0x20>
 80021ea:	0013      	movs	r3, r2
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d001      	beq.n	80021f6 <_free_r+0x4e>
 80021f2:	42a2      	cmp	r2, r4
 80021f4:	d9f9      	bls.n	80021ea <_free_r+0x42>
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	1858      	adds	r0, r3, r1
 80021fa:	42a0      	cmp	r0, r4
 80021fc:	d10b      	bne.n	8002216 <_free_r+0x6e>
 80021fe:	6820      	ldr	r0, [r4, #0]
 8002200:	1809      	adds	r1, r1, r0
 8002202:	1858      	adds	r0, r3, r1
 8002204:	6019      	str	r1, [r3, #0]
 8002206:	4282      	cmp	r2, r0
 8002208:	d1e0      	bne.n	80021cc <_free_r+0x24>
 800220a:	6810      	ldr	r0, [r2, #0]
 800220c:	6852      	ldr	r2, [r2, #4]
 800220e:	1841      	adds	r1, r0, r1
 8002210:	6019      	str	r1, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	e7da      	b.n	80021cc <_free_r+0x24>
 8002216:	42a0      	cmp	r0, r4
 8002218:	d902      	bls.n	8002220 <_free_r+0x78>
 800221a:	230c      	movs	r3, #12
 800221c:	602b      	str	r3, [r5, #0]
 800221e:	e7d5      	b.n	80021cc <_free_r+0x24>
 8002220:	6821      	ldr	r1, [r4, #0]
 8002222:	1860      	adds	r0, r4, r1
 8002224:	4282      	cmp	r2, r0
 8002226:	d103      	bne.n	8002230 <_free_r+0x88>
 8002228:	6810      	ldr	r0, [r2, #0]
 800222a:	6852      	ldr	r2, [r2, #4]
 800222c:	1841      	adds	r1, r0, r1
 800222e:	6021      	str	r1, [r4, #0]
 8002230:	6062      	str	r2, [r4, #4]
 8002232:	605c      	str	r4, [r3, #4]
 8002234:	e7ca      	b.n	80021cc <_free_r+0x24>
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	20000088 	.word	0x20000088

0800223c <_malloc_r>:
 800223c:	2303      	movs	r3, #3
 800223e:	b570      	push	{r4, r5, r6, lr}
 8002240:	1ccd      	adds	r5, r1, #3
 8002242:	439d      	bics	r5, r3
 8002244:	3508      	adds	r5, #8
 8002246:	0006      	movs	r6, r0
 8002248:	2d0c      	cmp	r5, #12
 800224a:	d21e      	bcs.n	800228a <_malloc_r+0x4e>
 800224c:	250c      	movs	r5, #12
 800224e:	42a9      	cmp	r1, r5
 8002250:	d81d      	bhi.n	800228e <_malloc_r+0x52>
 8002252:	0030      	movs	r0, r6
 8002254:	f000 fbcb 	bl	80029ee <__malloc_lock>
 8002258:	4a25      	ldr	r2, [pc, #148]	; (80022f0 <_malloc_r+0xb4>)
 800225a:	6814      	ldr	r4, [r2, #0]
 800225c:	0021      	movs	r1, r4
 800225e:	2900      	cmp	r1, #0
 8002260:	d119      	bne.n	8002296 <_malloc_r+0x5a>
 8002262:	4c24      	ldr	r4, [pc, #144]	; (80022f4 <_malloc_r+0xb8>)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <_malloc_r+0x36>
 800226a:	0030      	movs	r0, r6
 800226c:	f000 faf8 	bl	8002860 <_sbrk_r>
 8002270:	6020      	str	r0, [r4, #0]
 8002272:	0029      	movs	r1, r5
 8002274:	0030      	movs	r0, r6
 8002276:	f000 faf3 	bl	8002860 <_sbrk_r>
 800227a:	1c43      	adds	r3, r0, #1
 800227c:	d12b      	bne.n	80022d6 <_malloc_r+0x9a>
 800227e:	230c      	movs	r3, #12
 8002280:	0030      	movs	r0, r6
 8002282:	6033      	str	r3, [r6, #0]
 8002284:	f000 fbb4 	bl	80029f0 <__malloc_unlock>
 8002288:	e003      	b.n	8002292 <_malloc_r+0x56>
 800228a:	2d00      	cmp	r5, #0
 800228c:	dadf      	bge.n	800224e <_malloc_r+0x12>
 800228e:	230c      	movs	r3, #12
 8002290:	6033      	str	r3, [r6, #0]
 8002292:	2000      	movs	r0, #0
 8002294:	bd70      	pop	{r4, r5, r6, pc}
 8002296:	680b      	ldr	r3, [r1, #0]
 8002298:	1b5b      	subs	r3, r3, r5
 800229a:	d419      	bmi.n	80022d0 <_malloc_r+0x94>
 800229c:	2b0b      	cmp	r3, #11
 800229e:	d903      	bls.n	80022a8 <_malloc_r+0x6c>
 80022a0:	600b      	str	r3, [r1, #0]
 80022a2:	18cc      	adds	r4, r1, r3
 80022a4:	6025      	str	r5, [r4, #0]
 80022a6:	e003      	b.n	80022b0 <_malloc_r+0x74>
 80022a8:	684b      	ldr	r3, [r1, #4]
 80022aa:	428c      	cmp	r4, r1
 80022ac:	d10d      	bne.n	80022ca <_malloc_r+0x8e>
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	0030      	movs	r0, r6
 80022b2:	f000 fb9d 	bl	80029f0 <__malloc_unlock>
 80022b6:	0020      	movs	r0, r4
 80022b8:	2207      	movs	r2, #7
 80022ba:	300b      	adds	r0, #11
 80022bc:	1d23      	adds	r3, r4, #4
 80022be:	4390      	bics	r0, r2
 80022c0:	1ac3      	subs	r3, r0, r3
 80022c2:	d0e7      	beq.n	8002294 <_malloc_r+0x58>
 80022c4:	425a      	negs	r2, r3
 80022c6:	50e2      	str	r2, [r4, r3]
 80022c8:	e7e4      	b.n	8002294 <_malloc_r+0x58>
 80022ca:	6063      	str	r3, [r4, #4]
 80022cc:	000c      	movs	r4, r1
 80022ce:	e7ef      	b.n	80022b0 <_malloc_r+0x74>
 80022d0:	000c      	movs	r4, r1
 80022d2:	6849      	ldr	r1, [r1, #4]
 80022d4:	e7c3      	b.n	800225e <_malloc_r+0x22>
 80022d6:	2303      	movs	r3, #3
 80022d8:	1cc4      	adds	r4, r0, #3
 80022da:	439c      	bics	r4, r3
 80022dc:	42a0      	cmp	r0, r4
 80022de:	d0e1      	beq.n	80022a4 <_malloc_r+0x68>
 80022e0:	1a21      	subs	r1, r4, r0
 80022e2:	0030      	movs	r0, r6
 80022e4:	f000 fabc 	bl	8002860 <_sbrk_r>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d1db      	bne.n	80022a4 <_malloc_r+0x68>
 80022ec:	e7c7      	b.n	800227e <_malloc_r+0x42>
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	20000088 	.word	0x20000088
 80022f4:	2000008c 	.word	0x2000008c

080022f8 <__sfputc_r>:
 80022f8:	6893      	ldr	r3, [r2, #8]
 80022fa:	b510      	push	{r4, lr}
 80022fc:	3b01      	subs	r3, #1
 80022fe:	6093      	str	r3, [r2, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da04      	bge.n	800230e <__sfputc_r+0x16>
 8002304:	6994      	ldr	r4, [r2, #24]
 8002306:	42a3      	cmp	r3, r4
 8002308:	db07      	blt.n	800231a <__sfputc_r+0x22>
 800230a:	290a      	cmp	r1, #10
 800230c:	d005      	beq.n	800231a <__sfputc_r+0x22>
 800230e:	6813      	ldr	r3, [r2, #0]
 8002310:	1c58      	adds	r0, r3, #1
 8002312:	6010      	str	r0, [r2, #0]
 8002314:	7019      	strb	r1, [r3, #0]
 8002316:	0008      	movs	r0, r1
 8002318:	bd10      	pop	{r4, pc}
 800231a:	f7ff fc81 	bl	8001c20 <__swbuf_r>
 800231e:	0001      	movs	r1, r0
 8002320:	e7f9      	b.n	8002316 <__sfputc_r+0x1e>

08002322 <__sfputs_r>:
 8002322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002324:	0006      	movs	r6, r0
 8002326:	000f      	movs	r7, r1
 8002328:	0014      	movs	r4, r2
 800232a:	18d5      	adds	r5, r2, r3
 800232c:	42ac      	cmp	r4, r5
 800232e:	d101      	bne.n	8002334 <__sfputs_r+0x12>
 8002330:	2000      	movs	r0, #0
 8002332:	e007      	b.n	8002344 <__sfputs_r+0x22>
 8002334:	7821      	ldrb	r1, [r4, #0]
 8002336:	003a      	movs	r2, r7
 8002338:	0030      	movs	r0, r6
 800233a:	f7ff ffdd 	bl	80022f8 <__sfputc_r>
 800233e:	3401      	adds	r4, #1
 8002340:	1c43      	adds	r3, r0, #1
 8002342:	d1f3      	bne.n	800232c <__sfputs_r+0xa>
 8002344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002348 <_vfiprintf_r>:
 8002348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234a:	b0a1      	sub	sp, #132	; 0x84
 800234c:	9003      	str	r0, [sp, #12]
 800234e:	000f      	movs	r7, r1
 8002350:	0016      	movs	r6, r2
 8002352:	001d      	movs	r5, r3
 8002354:	2800      	cmp	r0, #0
 8002356:	d005      	beq.n	8002364 <_vfiprintf_r+0x1c>
 8002358:	6983      	ldr	r3, [r0, #24]
 800235a:	9305      	str	r3, [sp, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <_vfiprintf_r+0x1c>
 8002360:	f7ff fe22 	bl	8001fa8 <__sinit>
 8002364:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <_vfiprintf_r+0x20c>)
 8002366:	429f      	cmp	r7, r3
 8002368:	d15c      	bne.n	8002424 <_vfiprintf_r+0xdc>
 800236a:	9b03      	ldr	r3, [sp, #12]
 800236c:	685f      	ldr	r7, [r3, #4]
 800236e:	89bb      	ldrh	r3, [r7, #12]
 8002370:	071b      	lsls	r3, r3, #28
 8002372:	d563      	bpl.n	800243c <_vfiprintf_r+0xf4>
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d060      	beq.n	800243c <_vfiprintf_r+0xf4>
 800237a:	2300      	movs	r3, #0
 800237c:	ac08      	add	r4, sp, #32
 800237e:	6163      	str	r3, [r4, #20]
 8002380:	3320      	adds	r3, #32
 8002382:	7663      	strb	r3, [r4, #25]
 8002384:	3310      	adds	r3, #16
 8002386:	76a3      	strb	r3, [r4, #26]
 8002388:	9507      	str	r5, [sp, #28]
 800238a:	0035      	movs	r5, r6
 800238c:	782b      	ldrb	r3, [r5, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <_vfiprintf_r+0x4e>
 8002392:	2b25      	cmp	r3, #37	; 0x25
 8002394:	d15c      	bne.n	8002450 <_vfiprintf_r+0x108>
 8002396:	1bab      	subs	r3, r5, r6
 8002398:	9305      	str	r3, [sp, #20]
 800239a:	d00c      	beq.n	80023b6 <_vfiprintf_r+0x6e>
 800239c:	0032      	movs	r2, r6
 800239e:	0039      	movs	r1, r7
 80023a0:	9803      	ldr	r0, [sp, #12]
 80023a2:	f7ff ffbe 	bl	8002322 <__sfputs_r>
 80023a6:	1c43      	adds	r3, r0, #1
 80023a8:	d100      	bne.n	80023ac <_vfiprintf_r+0x64>
 80023aa:	e0c4      	b.n	8002536 <_vfiprintf_r+0x1ee>
 80023ac:	6962      	ldr	r2, [r4, #20]
 80023ae:	9b05      	ldr	r3, [sp, #20]
 80023b0:	4694      	mov	ip, r2
 80023b2:	4463      	add	r3, ip
 80023b4:	6163      	str	r3, [r4, #20]
 80023b6:	782b      	ldrb	r3, [r5, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d100      	bne.n	80023be <_vfiprintf_r+0x76>
 80023bc:	e0bb      	b.n	8002536 <_vfiprintf_r+0x1ee>
 80023be:	2201      	movs	r2, #1
 80023c0:	2300      	movs	r3, #0
 80023c2:	4252      	negs	r2, r2
 80023c4:	6062      	str	r2, [r4, #4]
 80023c6:	a904      	add	r1, sp, #16
 80023c8:	3254      	adds	r2, #84	; 0x54
 80023ca:	1852      	adds	r2, r2, r1
 80023cc:	1c6e      	adds	r6, r5, #1
 80023ce:	6023      	str	r3, [r4, #0]
 80023d0:	60e3      	str	r3, [r4, #12]
 80023d2:	60a3      	str	r3, [r4, #8]
 80023d4:	7013      	strb	r3, [r2, #0]
 80023d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80023d8:	7831      	ldrb	r1, [r6, #0]
 80023da:	2205      	movs	r2, #5
 80023dc:	485e      	ldr	r0, [pc, #376]	; (8002558 <_vfiprintf_r+0x210>)
 80023de:	f000 fafb 	bl	80029d8 <memchr>
 80023e2:	1c75      	adds	r5, r6, #1
 80023e4:	2800      	cmp	r0, #0
 80023e6:	d135      	bne.n	8002454 <_vfiprintf_r+0x10c>
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	06d3      	lsls	r3, r2, #27
 80023ec:	d504      	bpl.n	80023f8 <_vfiprintf_r+0xb0>
 80023ee:	2353      	movs	r3, #83	; 0x53
 80023f0:	a904      	add	r1, sp, #16
 80023f2:	185b      	adds	r3, r3, r1
 80023f4:	2120      	movs	r1, #32
 80023f6:	7019      	strb	r1, [r3, #0]
 80023f8:	0713      	lsls	r3, r2, #28
 80023fa:	d504      	bpl.n	8002406 <_vfiprintf_r+0xbe>
 80023fc:	2353      	movs	r3, #83	; 0x53
 80023fe:	a904      	add	r1, sp, #16
 8002400:	185b      	adds	r3, r3, r1
 8002402:	212b      	movs	r1, #43	; 0x2b
 8002404:	7019      	strb	r1, [r3, #0]
 8002406:	7833      	ldrb	r3, [r6, #0]
 8002408:	2b2a      	cmp	r3, #42	; 0x2a
 800240a:	d02c      	beq.n	8002466 <_vfiprintf_r+0x11e>
 800240c:	0035      	movs	r5, r6
 800240e:	2100      	movs	r1, #0
 8002410:	200a      	movs	r0, #10
 8002412:	68e3      	ldr	r3, [r4, #12]
 8002414:	782a      	ldrb	r2, [r5, #0]
 8002416:	1c6e      	adds	r6, r5, #1
 8002418:	3a30      	subs	r2, #48	; 0x30
 800241a:	2a09      	cmp	r2, #9
 800241c:	d964      	bls.n	80024e8 <_vfiprintf_r+0x1a0>
 800241e:	2900      	cmp	r1, #0
 8002420:	d02e      	beq.n	8002480 <_vfiprintf_r+0x138>
 8002422:	e026      	b.n	8002472 <_vfiprintf_r+0x12a>
 8002424:	4b4d      	ldr	r3, [pc, #308]	; (800255c <_vfiprintf_r+0x214>)
 8002426:	429f      	cmp	r7, r3
 8002428:	d102      	bne.n	8002430 <_vfiprintf_r+0xe8>
 800242a:	9b03      	ldr	r3, [sp, #12]
 800242c:	689f      	ldr	r7, [r3, #8]
 800242e:	e79e      	b.n	800236e <_vfiprintf_r+0x26>
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <_vfiprintf_r+0x218>)
 8002432:	429f      	cmp	r7, r3
 8002434:	d19b      	bne.n	800236e <_vfiprintf_r+0x26>
 8002436:	9b03      	ldr	r3, [sp, #12]
 8002438:	68df      	ldr	r7, [r3, #12]
 800243a:	e798      	b.n	800236e <_vfiprintf_r+0x26>
 800243c:	0039      	movs	r1, r7
 800243e:	9803      	ldr	r0, [sp, #12]
 8002440:	f7ff fc44 	bl	8001ccc <__swsetup_r>
 8002444:	2800      	cmp	r0, #0
 8002446:	d098      	beq.n	800237a <_vfiprintf_r+0x32>
 8002448:	2001      	movs	r0, #1
 800244a:	4240      	negs	r0, r0
 800244c:	b021      	add	sp, #132	; 0x84
 800244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002450:	3501      	adds	r5, #1
 8002452:	e79b      	b.n	800238c <_vfiprintf_r+0x44>
 8002454:	4b40      	ldr	r3, [pc, #256]	; (8002558 <_vfiprintf_r+0x210>)
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	1ac0      	subs	r0, r0, r3
 800245a:	2301      	movs	r3, #1
 800245c:	4083      	lsls	r3, r0
 800245e:	4313      	orrs	r3, r2
 8002460:	6023      	str	r3, [r4, #0]
 8002462:	002e      	movs	r6, r5
 8002464:	e7b8      	b.n	80023d8 <_vfiprintf_r+0x90>
 8002466:	9b07      	ldr	r3, [sp, #28]
 8002468:	1d19      	adds	r1, r3, #4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	9107      	str	r1, [sp, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db01      	blt.n	8002476 <_vfiprintf_r+0x12e>
 8002472:	930b      	str	r3, [sp, #44]	; 0x2c
 8002474:	e004      	b.n	8002480 <_vfiprintf_r+0x138>
 8002476:	425b      	negs	r3, r3
 8002478:	60e3      	str	r3, [r4, #12]
 800247a:	2302      	movs	r3, #2
 800247c:	4313      	orrs	r3, r2
 800247e:	6023      	str	r3, [r4, #0]
 8002480:	782b      	ldrb	r3, [r5, #0]
 8002482:	2b2e      	cmp	r3, #46	; 0x2e
 8002484:	d10a      	bne.n	800249c <_vfiprintf_r+0x154>
 8002486:	786b      	ldrb	r3, [r5, #1]
 8002488:	2b2a      	cmp	r3, #42	; 0x2a
 800248a:	d135      	bne.n	80024f8 <_vfiprintf_r+0x1b0>
 800248c:	9b07      	ldr	r3, [sp, #28]
 800248e:	3502      	adds	r5, #2
 8002490:	1d1a      	adds	r2, r3, #4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	9207      	str	r2, [sp, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db2b      	blt.n	80024f2 <_vfiprintf_r+0x1aa>
 800249a:	9309      	str	r3, [sp, #36]	; 0x24
 800249c:	4e31      	ldr	r6, [pc, #196]	; (8002564 <_vfiprintf_r+0x21c>)
 800249e:	7829      	ldrb	r1, [r5, #0]
 80024a0:	2203      	movs	r2, #3
 80024a2:	0030      	movs	r0, r6
 80024a4:	f000 fa98 	bl	80029d8 <memchr>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d006      	beq.n	80024ba <_vfiprintf_r+0x172>
 80024ac:	2340      	movs	r3, #64	; 0x40
 80024ae:	1b80      	subs	r0, r0, r6
 80024b0:	4083      	lsls	r3, r0
 80024b2:	6822      	ldr	r2, [r4, #0]
 80024b4:	3501      	adds	r5, #1
 80024b6:	4313      	orrs	r3, r2
 80024b8:	6023      	str	r3, [r4, #0]
 80024ba:	7829      	ldrb	r1, [r5, #0]
 80024bc:	2206      	movs	r2, #6
 80024be:	482a      	ldr	r0, [pc, #168]	; (8002568 <_vfiprintf_r+0x220>)
 80024c0:	1c6e      	adds	r6, r5, #1
 80024c2:	7621      	strb	r1, [r4, #24]
 80024c4:	f000 fa88 	bl	80029d8 <memchr>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d03a      	beq.n	8002542 <_vfiprintf_r+0x1fa>
 80024cc:	4b27      	ldr	r3, [pc, #156]	; (800256c <_vfiprintf_r+0x224>)
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d125      	bne.n	800251e <_vfiprintf_r+0x1d6>
 80024d2:	2207      	movs	r2, #7
 80024d4:	9b07      	ldr	r3, [sp, #28]
 80024d6:	3307      	adds	r3, #7
 80024d8:	4393      	bics	r3, r2
 80024da:	3308      	adds	r3, #8
 80024dc:	9307      	str	r3, [sp, #28]
 80024de:	6963      	ldr	r3, [r4, #20]
 80024e0:	9a04      	ldr	r2, [sp, #16]
 80024e2:	189b      	adds	r3, r3, r2
 80024e4:	6163      	str	r3, [r4, #20]
 80024e6:	e750      	b.n	800238a <_vfiprintf_r+0x42>
 80024e8:	4343      	muls	r3, r0
 80024ea:	2101      	movs	r1, #1
 80024ec:	189b      	adds	r3, r3, r2
 80024ee:	0035      	movs	r5, r6
 80024f0:	e790      	b.n	8002414 <_vfiprintf_r+0xcc>
 80024f2:	2301      	movs	r3, #1
 80024f4:	425b      	negs	r3, r3
 80024f6:	e7d0      	b.n	800249a <_vfiprintf_r+0x152>
 80024f8:	2300      	movs	r3, #0
 80024fa:	200a      	movs	r0, #10
 80024fc:	001a      	movs	r2, r3
 80024fe:	3501      	adds	r5, #1
 8002500:	6063      	str	r3, [r4, #4]
 8002502:	7829      	ldrb	r1, [r5, #0]
 8002504:	1c6e      	adds	r6, r5, #1
 8002506:	3930      	subs	r1, #48	; 0x30
 8002508:	2909      	cmp	r1, #9
 800250a:	d903      	bls.n	8002514 <_vfiprintf_r+0x1cc>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0c5      	beq.n	800249c <_vfiprintf_r+0x154>
 8002510:	9209      	str	r2, [sp, #36]	; 0x24
 8002512:	e7c3      	b.n	800249c <_vfiprintf_r+0x154>
 8002514:	4342      	muls	r2, r0
 8002516:	2301      	movs	r3, #1
 8002518:	1852      	adds	r2, r2, r1
 800251a:	0035      	movs	r5, r6
 800251c:	e7f1      	b.n	8002502 <_vfiprintf_r+0x1ba>
 800251e:	ab07      	add	r3, sp, #28
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	003a      	movs	r2, r7
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <_vfiprintf_r+0x228>)
 8002526:	0021      	movs	r1, r4
 8002528:	9803      	ldr	r0, [sp, #12]
 800252a:	e000      	b.n	800252e <_vfiprintf_r+0x1e6>
 800252c:	bf00      	nop
 800252e:	9004      	str	r0, [sp, #16]
 8002530:	9b04      	ldr	r3, [sp, #16]
 8002532:	3301      	adds	r3, #1
 8002534:	d1d3      	bne.n	80024de <_vfiprintf_r+0x196>
 8002536:	89bb      	ldrh	r3, [r7, #12]
 8002538:	065b      	lsls	r3, r3, #25
 800253a:	d500      	bpl.n	800253e <_vfiprintf_r+0x1f6>
 800253c:	e784      	b.n	8002448 <_vfiprintf_r+0x100>
 800253e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002540:	e784      	b.n	800244c <_vfiprintf_r+0x104>
 8002542:	ab07      	add	r3, sp, #28
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	003a      	movs	r2, r7
 8002548:	4b09      	ldr	r3, [pc, #36]	; (8002570 <_vfiprintf_r+0x228>)
 800254a:	0021      	movs	r1, r4
 800254c:	9803      	ldr	r0, [sp, #12]
 800254e:	f000 f87f 	bl	8002650 <_printf_i>
 8002552:	e7ec      	b.n	800252e <_vfiprintf_r+0x1e6>
 8002554:	08002ad0 	.word	0x08002ad0
 8002558:	08002b10 	.word	0x08002b10
 800255c:	08002af0 	.word	0x08002af0
 8002560:	08002ab0 	.word	0x08002ab0
 8002564:	08002b16 	.word	0x08002b16
 8002568:	08002b1a 	.word	0x08002b1a
 800256c:	00000000 	.word	0x00000000
 8002570:	08002323 	.word	0x08002323

08002574 <_printf_common>:
 8002574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002576:	0015      	movs	r5, r2
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	688a      	ldr	r2, [r1, #8]
 800257c:	690b      	ldr	r3, [r1, #16]
 800257e:	9000      	str	r0, [sp, #0]
 8002580:	000c      	movs	r4, r1
 8002582:	4293      	cmp	r3, r2
 8002584:	da00      	bge.n	8002588 <_printf_common+0x14>
 8002586:	0013      	movs	r3, r2
 8002588:	0022      	movs	r2, r4
 800258a:	602b      	str	r3, [r5, #0]
 800258c:	3243      	adds	r2, #67	; 0x43
 800258e:	7812      	ldrb	r2, [r2, #0]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d001      	beq.n	8002598 <_printf_common+0x24>
 8002594:	3301      	adds	r3, #1
 8002596:	602b      	str	r3, [r5, #0]
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	d502      	bpl.n	80025a4 <_printf_common+0x30>
 800259e:	682b      	ldr	r3, [r5, #0]
 80025a0:	3302      	adds	r3, #2
 80025a2:	602b      	str	r3, [r5, #0]
 80025a4:	2706      	movs	r7, #6
 80025a6:	6823      	ldr	r3, [r4, #0]
 80025a8:	401f      	ands	r7, r3
 80025aa:	d027      	beq.n	80025fc <_printf_common+0x88>
 80025ac:	0023      	movs	r3, r4
 80025ae:	3343      	adds	r3, #67	; 0x43
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	1e5a      	subs	r2, r3, #1
 80025b4:	4193      	sbcs	r3, r2
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	0692      	lsls	r2, r2, #26
 80025ba:	d430      	bmi.n	800261e <_printf_common+0xaa>
 80025bc:	0022      	movs	r2, r4
 80025be:	9901      	ldr	r1, [sp, #4]
 80025c0:	3243      	adds	r2, #67	; 0x43
 80025c2:	9800      	ldr	r0, [sp, #0]
 80025c4:	9e08      	ldr	r6, [sp, #32]
 80025c6:	47b0      	blx	r6
 80025c8:	1c43      	adds	r3, r0, #1
 80025ca:	d025      	beq.n	8002618 <_printf_common+0xa4>
 80025cc:	2306      	movs	r3, #6
 80025ce:	6820      	ldr	r0, [r4, #0]
 80025d0:	682a      	ldr	r2, [r5, #0]
 80025d2:	68e1      	ldr	r1, [r4, #12]
 80025d4:	4003      	ands	r3, r0
 80025d6:	2500      	movs	r5, #0
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d103      	bne.n	80025e4 <_printf_common+0x70>
 80025dc:	1a8d      	subs	r5, r1, r2
 80025de:	43eb      	mvns	r3, r5
 80025e0:	17db      	asrs	r3, r3, #31
 80025e2:	401d      	ands	r5, r3
 80025e4:	68a3      	ldr	r3, [r4, #8]
 80025e6:	6922      	ldr	r2, [r4, #16]
 80025e8:	4293      	cmp	r3, r2
 80025ea:	dd01      	ble.n	80025f0 <_printf_common+0x7c>
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	18ed      	adds	r5, r5, r3
 80025f0:	2700      	movs	r7, #0
 80025f2:	42bd      	cmp	r5, r7
 80025f4:	d120      	bne.n	8002638 <_printf_common+0xc4>
 80025f6:	2000      	movs	r0, #0
 80025f8:	e010      	b.n	800261c <_printf_common+0xa8>
 80025fa:	3701      	adds	r7, #1
 80025fc:	68e3      	ldr	r3, [r4, #12]
 80025fe:	682a      	ldr	r2, [r5, #0]
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	42bb      	cmp	r3, r7
 8002604:	ddd2      	ble.n	80025ac <_printf_common+0x38>
 8002606:	0022      	movs	r2, r4
 8002608:	2301      	movs	r3, #1
 800260a:	3219      	adds	r2, #25
 800260c:	9901      	ldr	r1, [sp, #4]
 800260e:	9800      	ldr	r0, [sp, #0]
 8002610:	9e08      	ldr	r6, [sp, #32]
 8002612:	47b0      	blx	r6
 8002614:	1c43      	adds	r3, r0, #1
 8002616:	d1f0      	bne.n	80025fa <_printf_common+0x86>
 8002618:	2001      	movs	r0, #1
 800261a:	4240      	negs	r0, r0
 800261c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800261e:	2030      	movs	r0, #48	; 0x30
 8002620:	18e1      	adds	r1, r4, r3
 8002622:	3143      	adds	r1, #67	; 0x43
 8002624:	7008      	strb	r0, [r1, #0]
 8002626:	0021      	movs	r1, r4
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	3145      	adds	r1, #69	; 0x45
 800262c:	7809      	ldrb	r1, [r1, #0]
 800262e:	18a2      	adds	r2, r4, r2
 8002630:	3243      	adds	r2, #67	; 0x43
 8002632:	3302      	adds	r3, #2
 8002634:	7011      	strb	r1, [r2, #0]
 8002636:	e7c1      	b.n	80025bc <_printf_common+0x48>
 8002638:	0022      	movs	r2, r4
 800263a:	2301      	movs	r3, #1
 800263c:	321a      	adds	r2, #26
 800263e:	9901      	ldr	r1, [sp, #4]
 8002640:	9800      	ldr	r0, [sp, #0]
 8002642:	9e08      	ldr	r6, [sp, #32]
 8002644:	47b0      	blx	r6
 8002646:	1c43      	adds	r3, r0, #1
 8002648:	d0e6      	beq.n	8002618 <_printf_common+0xa4>
 800264a:	3701      	adds	r7, #1
 800264c:	e7d1      	b.n	80025f2 <_printf_common+0x7e>
	...

08002650 <_printf_i>:
 8002650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	9204      	str	r2, [sp, #16]
 8002656:	000a      	movs	r2, r1
 8002658:	3243      	adds	r2, #67	; 0x43
 800265a:	9305      	str	r3, [sp, #20]
 800265c:	9003      	str	r0, [sp, #12]
 800265e:	9202      	str	r2, [sp, #8]
 8002660:	7e0a      	ldrb	r2, [r1, #24]
 8002662:	000c      	movs	r4, r1
 8002664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002666:	2a6e      	cmp	r2, #110	; 0x6e
 8002668:	d100      	bne.n	800266c <_printf_i+0x1c>
 800266a:	e086      	b.n	800277a <_printf_i+0x12a>
 800266c:	d81f      	bhi.n	80026ae <_printf_i+0x5e>
 800266e:	2a63      	cmp	r2, #99	; 0x63
 8002670:	d033      	beq.n	80026da <_printf_i+0x8a>
 8002672:	d808      	bhi.n	8002686 <_printf_i+0x36>
 8002674:	2a00      	cmp	r2, #0
 8002676:	d100      	bne.n	800267a <_printf_i+0x2a>
 8002678:	e08c      	b.n	8002794 <_printf_i+0x144>
 800267a:	2a58      	cmp	r2, #88	; 0x58
 800267c:	d04d      	beq.n	800271a <_printf_i+0xca>
 800267e:	0025      	movs	r5, r4
 8002680:	3542      	adds	r5, #66	; 0x42
 8002682:	702a      	strb	r2, [r5, #0]
 8002684:	e030      	b.n	80026e8 <_printf_i+0x98>
 8002686:	2a64      	cmp	r2, #100	; 0x64
 8002688:	d001      	beq.n	800268e <_printf_i+0x3e>
 800268a:	2a69      	cmp	r2, #105	; 0x69
 800268c:	d1f7      	bne.n	800267e <_printf_i+0x2e>
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	6825      	ldr	r5, [r4, #0]
 8002692:	1d0a      	adds	r2, r1, #4
 8002694:	0628      	lsls	r0, r5, #24
 8002696:	d529      	bpl.n	80026ec <_printf_i+0x9c>
 8002698:	6808      	ldr	r0, [r1, #0]
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	2800      	cmp	r0, #0
 800269e:	da03      	bge.n	80026a8 <_printf_i+0x58>
 80026a0:	232d      	movs	r3, #45	; 0x2d
 80026a2:	9a02      	ldr	r2, [sp, #8]
 80026a4:	4240      	negs	r0, r0
 80026a6:	7013      	strb	r3, [r2, #0]
 80026a8:	4e6b      	ldr	r6, [pc, #428]	; (8002858 <_printf_i+0x208>)
 80026aa:	270a      	movs	r7, #10
 80026ac:	e04f      	b.n	800274e <_printf_i+0xfe>
 80026ae:	2a73      	cmp	r2, #115	; 0x73
 80026b0:	d074      	beq.n	800279c <_printf_i+0x14c>
 80026b2:	d808      	bhi.n	80026c6 <_printf_i+0x76>
 80026b4:	2a6f      	cmp	r2, #111	; 0x6f
 80026b6:	d01f      	beq.n	80026f8 <_printf_i+0xa8>
 80026b8:	2a70      	cmp	r2, #112	; 0x70
 80026ba:	d1e0      	bne.n	800267e <_printf_i+0x2e>
 80026bc:	2220      	movs	r2, #32
 80026be:	6809      	ldr	r1, [r1, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	6022      	str	r2, [r4, #0]
 80026c4:	e003      	b.n	80026ce <_printf_i+0x7e>
 80026c6:	2a75      	cmp	r2, #117	; 0x75
 80026c8:	d016      	beq.n	80026f8 <_printf_i+0xa8>
 80026ca:	2a78      	cmp	r2, #120	; 0x78
 80026cc:	d1d7      	bne.n	800267e <_printf_i+0x2e>
 80026ce:	0022      	movs	r2, r4
 80026d0:	2178      	movs	r1, #120	; 0x78
 80026d2:	3245      	adds	r2, #69	; 0x45
 80026d4:	7011      	strb	r1, [r2, #0]
 80026d6:	4e61      	ldr	r6, [pc, #388]	; (800285c <_printf_i+0x20c>)
 80026d8:	e022      	b.n	8002720 <_printf_i+0xd0>
 80026da:	0025      	movs	r5, r4
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	3542      	adds	r5, #66	; 0x42
 80026e0:	1d11      	adds	r1, r2, #4
 80026e2:	6019      	str	r1, [r3, #0]
 80026e4:	6813      	ldr	r3, [r2, #0]
 80026e6:	702b      	strb	r3, [r5, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	e065      	b.n	80027b8 <_printf_i+0x168>
 80026ec:	6808      	ldr	r0, [r1, #0]
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	0669      	lsls	r1, r5, #25
 80026f2:	d5d3      	bpl.n	800269c <_printf_i+0x4c>
 80026f4:	b200      	sxth	r0, r0
 80026f6:	e7d1      	b.n	800269c <_printf_i+0x4c>
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	6825      	ldr	r5, [r4, #0]
 80026fc:	1d08      	adds	r0, r1, #4
 80026fe:	6018      	str	r0, [r3, #0]
 8002700:	6808      	ldr	r0, [r1, #0]
 8002702:	062e      	lsls	r6, r5, #24
 8002704:	d505      	bpl.n	8002712 <_printf_i+0xc2>
 8002706:	4e54      	ldr	r6, [pc, #336]	; (8002858 <_printf_i+0x208>)
 8002708:	2708      	movs	r7, #8
 800270a:	2a6f      	cmp	r2, #111	; 0x6f
 800270c:	d01b      	beq.n	8002746 <_printf_i+0xf6>
 800270e:	270a      	movs	r7, #10
 8002710:	e019      	b.n	8002746 <_printf_i+0xf6>
 8002712:	066d      	lsls	r5, r5, #25
 8002714:	d5f7      	bpl.n	8002706 <_printf_i+0xb6>
 8002716:	b280      	uxth	r0, r0
 8002718:	e7f5      	b.n	8002706 <_printf_i+0xb6>
 800271a:	3145      	adds	r1, #69	; 0x45
 800271c:	4e4e      	ldr	r6, [pc, #312]	; (8002858 <_printf_i+0x208>)
 800271e:	700a      	strb	r2, [r1, #0]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	6822      	ldr	r2, [r4, #0]
 8002724:	1d01      	adds	r1, r0, #4
 8002726:	6800      	ldr	r0, [r0, #0]
 8002728:	6019      	str	r1, [r3, #0]
 800272a:	0615      	lsls	r5, r2, #24
 800272c:	d521      	bpl.n	8002772 <_printf_i+0x122>
 800272e:	07d3      	lsls	r3, r2, #31
 8002730:	d502      	bpl.n	8002738 <_printf_i+0xe8>
 8002732:	2320      	movs	r3, #32
 8002734:	431a      	orrs	r2, r3
 8002736:	6022      	str	r2, [r4, #0]
 8002738:	2710      	movs	r7, #16
 800273a:	2800      	cmp	r0, #0
 800273c:	d103      	bne.n	8002746 <_printf_i+0xf6>
 800273e:	2320      	movs	r3, #32
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	439a      	bics	r2, r3
 8002744:	6022      	str	r2, [r4, #0]
 8002746:	0023      	movs	r3, r4
 8002748:	2200      	movs	r2, #0
 800274a:	3343      	adds	r3, #67	; 0x43
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	6863      	ldr	r3, [r4, #4]
 8002750:	60a3      	str	r3, [r4, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db58      	blt.n	8002808 <_printf_i+0x1b8>
 8002756:	2204      	movs	r2, #4
 8002758:	6821      	ldr	r1, [r4, #0]
 800275a:	4391      	bics	r1, r2
 800275c:	6021      	str	r1, [r4, #0]
 800275e:	2800      	cmp	r0, #0
 8002760:	d154      	bne.n	800280c <_printf_i+0x1bc>
 8002762:	9d02      	ldr	r5, [sp, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05a      	beq.n	800281e <_printf_i+0x1ce>
 8002768:	0025      	movs	r5, r4
 800276a:	7833      	ldrb	r3, [r6, #0]
 800276c:	3542      	adds	r5, #66	; 0x42
 800276e:	702b      	strb	r3, [r5, #0]
 8002770:	e055      	b.n	800281e <_printf_i+0x1ce>
 8002772:	0655      	lsls	r5, r2, #25
 8002774:	d5db      	bpl.n	800272e <_printf_i+0xde>
 8002776:	b280      	uxth	r0, r0
 8002778:	e7d9      	b.n	800272e <_printf_i+0xde>
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	680d      	ldr	r5, [r1, #0]
 800277e:	1d10      	adds	r0, r2, #4
 8002780:	6949      	ldr	r1, [r1, #20]
 8002782:	6018      	str	r0, [r3, #0]
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	062e      	lsls	r6, r5, #24
 8002788:	d501      	bpl.n	800278e <_printf_i+0x13e>
 800278a:	6019      	str	r1, [r3, #0]
 800278c:	e002      	b.n	8002794 <_printf_i+0x144>
 800278e:	066d      	lsls	r5, r5, #25
 8002790:	d5fb      	bpl.n	800278a <_printf_i+0x13a>
 8002792:	8019      	strh	r1, [r3, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	9d02      	ldr	r5, [sp, #8]
 8002798:	6123      	str	r3, [r4, #16]
 800279a:	e04f      	b.n	800283c <_printf_i+0x1ec>
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	1d11      	adds	r1, r2, #4
 80027a0:	6019      	str	r1, [r3, #0]
 80027a2:	6815      	ldr	r5, [r2, #0]
 80027a4:	2100      	movs	r1, #0
 80027a6:	6862      	ldr	r2, [r4, #4]
 80027a8:	0028      	movs	r0, r5
 80027aa:	f000 f915 	bl	80029d8 <memchr>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d001      	beq.n	80027b6 <_printf_i+0x166>
 80027b2:	1b40      	subs	r0, r0, r5
 80027b4:	6060      	str	r0, [r4, #4]
 80027b6:	6863      	ldr	r3, [r4, #4]
 80027b8:	6123      	str	r3, [r4, #16]
 80027ba:	2300      	movs	r3, #0
 80027bc:	9a02      	ldr	r2, [sp, #8]
 80027be:	7013      	strb	r3, [r2, #0]
 80027c0:	e03c      	b.n	800283c <_printf_i+0x1ec>
 80027c2:	6923      	ldr	r3, [r4, #16]
 80027c4:	002a      	movs	r2, r5
 80027c6:	9904      	ldr	r1, [sp, #16]
 80027c8:	9803      	ldr	r0, [sp, #12]
 80027ca:	9d05      	ldr	r5, [sp, #20]
 80027cc:	47a8      	blx	r5
 80027ce:	1c43      	adds	r3, r0, #1
 80027d0:	d03e      	beq.n	8002850 <_printf_i+0x200>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	079b      	lsls	r3, r3, #30
 80027d6:	d415      	bmi.n	8002804 <_printf_i+0x1b4>
 80027d8:	9b07      	ldr	r3, [sp, #28]
 80027da:	68e0      	ldr	r0, [r4, #12]
 80027dc:	4298      	cmp	r0, r3
 80027de:	da39      	bge.n	8002854 <_printf_i+0x204>
 80027e0:	0018      	movs	r0, r3
 80027e2:	e037      	b.n	8002854 <_printf_i+0x204>
 80027e4:	0022      	movs	r2, r4
 80027e6:	2301      	movs	r3, #1
 80027e8:	3219      	adds	r2, #25
 80027ea:	9904      	ldr	r1, [sp, #16]
 80027ec:	9803      	ldr	r0, [sp, #12]
 80027ee:	9e05      	ldr	r6, [sp, #20]
 80027f0:	47b0      	blx	r6
 80027f2:	1c43      	adds	r3, r0, #1
 80027f4:	d02c      	beq.n	8002850 <_printf_i+0x200>
 80027f6:	3501      	adds	r5, #1
 80027f8:	68e3      	ldr	r3, [r4, #12]
 80027fa:	9a07      	ldr	r2, [sp, #28]
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	42ab      	cmp	r3, r5
 8002800:	dcf0      	bgt.n	80027e4 <_printf_i+0x194>
 8002802:	e7e9      	b.n	80027d8 <_printf_i+0x188>
 8002804:	2500      	movs	r5, #0
 8002806:	e7f7      	b.n	80027f8 <_printf_i+0x1a8>
 8002808:	2800      	cmp	r0, #0
 800280a:	d0ad      	beq.n	8002768 <_printf_i+0x118>
 800280c:	9d02      	ldr	r5, [sp, #8]
 800280e:	0039      	movs	r1, r7
 8002810:	f7fd fd00 	bl	8000214 <__aeabi_uidivmod>
 8002814:	5c73      	ldrb	r3, [r6, r1]
 8002816:	3d01      	subs	r5, #1
 8002818:	702b      	strb	r3, [r5, #0]
 800281a:	2800      	cmp	r0, #0
 800281c:	d1f7      	bne.n	800280e <_printf_i+0x1be>
 800281e:	2f08      	cmp	r7, #8
 8002820:	d109      	bne.n	8002836 <_printf_i+0x1e6>
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	07db      	lsls	r3, r3, #31
 8002826:	d506      	bpl.n	8002836 <_printf_i+0x1e6>
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	6922      	ldr	r2, [r4, #16]
 800282c:	4293      	cmp	r3, r2
 800282e:	dc02      	bgt.n	8002836 <_printf_i+0x1e6>
 8002830:	2330      	movs	r3, #48	; 0x30
 8002832:	3d01      	subs	r5, #1
 8002834:	702b      	strb	r3, [r5, #0]
 8002836:	9b02      	ldr	r3, [sp, #8]
 8002838:	1b5b      	subs	r3, r3, r5
 800283a:	6123      	str	r3, [r4, #16]
 800283c:	9b05      	ldr	r3, [sp, #20]
 800283e:	aa07      	add	r2, sp, #28
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	0021      	movs	r1, r4
 8002844:	9b04      	ldr	r3, [sp, #16]
 8002846:	9803      	ldr	r0, [sp, #12]
 8002848:	f7ff fe94 	bl	8002574 <_printf_common>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d1b8      	bne.n	80027c2 <_printf_i+0x172>
 8002850:	2001      	movs	r0, #1
 8002852:	4240      	negs	r0, r0
 8002854:	b009      	add	sp, #36	; 0x24
 8002856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002858:	08002b21 	.word	0x08002b21
 800285c:	08002b32 	.word	0x08002b32

08002860 <_sbrk_r>:
 8002860:	2300      	movs	r3, #0
 8002862:	b570      	push	{r4, r5, r6, lr}
 8002864:	4c06      	ldr	r4, [pc, #24]	; (8002880 <_sbrk_r+0x20>)
 8002866:	0005      	movs	r5, r0
 8002868:	0008      	movs	r0, r1
 800286a:	6023      	str	r3, [r4, #0]
 800286c:	f7fe ff3a 	bl	80016e4 <_sbrk>
 8002870:	1c43      	adds	r3, r0, #1
 8002872:	d103      	bne.n	800287c <_sbrk_r+0x1c>
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d000      	beq.n	800287c <_sbrk_r+0x1c>
 800287a:	602b      	str	r3, [r5, #0]
 800287c:	bd70      	pop	{r4, r5, r6, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20000094 	.word	0x20000094

08002884 <__sread>:
 8002884:	b570      	push	{r4, r5, r6, lr}
 8002886:	000c      	movs	r4, r1
 8002888:	250e      	movs	r5, #14
 800288a:	5f49      	ldrsh	r1, [r1, r5]
 800288c:	f000 f8b2 	bl	80029f4 <_read_r>
 8002890:	2800      	cmp	r0, #0
 8002892:	db03      	blt.n	800289c <__sread+0x18>
 8002894:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002896:	181b      	adds	r3, r3, r0
 8002898:	6563      	str	r3, [r4, #84]	; 0x54
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	89a3      	ldrh	r3, [r4, #12]
 800289e:	4a02      	ldr	r2, [pc, #8]	; (80028a8 <__sread+0x24>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	81a3      	strh	r3, [r4, #12]
 80028a4:	e7f9      	b.n	800289a <__sread+0x16>
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	ffffefff 	.word	0xffffefff

080028ac <__swrite>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	001f      	movs	r7, r3
 80028b0:	898b      	ldrh	r3, [r1, #12]
 80028b2:	0005      	movs	r5, r0
 80028b4:	000c      	movs	r4, r1
 80028b6:	0016      	movs	r6, r2
 80028b8:	05db      	lsls	r3, r3, #23
 80028ba:	d505      	bpl.n	80028c8 <__swrite+0x1c>
 80028bc:	230e      	movs	r3, #14
 80028be:	5ec9      	ldrsh	r1, [r1, r3]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2302      	movs	r3, #2
 80028c4:	f000 f874 	bl	80029b0 <_lseek_r>
 80028c8:	89a3      	ldrh	r3, [r4, #12]
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <__swrite+0x34>)
 80028cc:	0028      	movs	r0, r5
 80028ce:	4013      	ands	r3, r2
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	0032      	movs	r2, r6
 80028d4:	230e      	movs	r3, #14
 80028d6:	5ee1      	ldrsh	r1, [r4, r3]
 80028d8:	003b      	movs	r3, r7
 80028da:	f000 f81f 	bl	800291c <_write_r>
 80028de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e0:	ffffefff 	.word	0xffffefff

080028e4 <__sseek>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	000c      	movs	r4, r1
 80028e8:	250e      	movs	r5, #14
 80028ea:	5f49      	ldrsh	r1, [r1, r5]
 80028ec:	f000 f860 	bl	80029b0 <_lseek_r>
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	1c42      	adds	r2, r0, #1
 80028f4:	d103      	bne.n	80028fe <__sseek+0x1a>
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <__sseek+0x28>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	81a3      	strh	r3, [r4, #12]
 80028fc:	bd70      	pop	{r4, r5, r6, pc}
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	0152      	lsls	r2, r2, #5
 8002902:	4313      	orrs	r3, r2
 8002904:	81a3      	strh	r3, [r4, #12]
 8002906:	6560      	str	r0, [r4, #84]	; 0x54
 8002908:	e7f8      	b.n	80028fc <__sseek+0x18>
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	ffffefff 	.word	0xffffefff

08002910 <__sclose>:
 8002910:	b510      	push	{r4, lr}
 8002912:	230e      	movs	r3, #14
 8002914:	5ec9      	ldrsh	r1, [r1, r3]
 8002916:	f000 f815 	bl	8002944 <_close_r>
 800291a:	bd10      	pop	{r4, pc}

0800291c <_write_r>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	0005      	movs	r5, r0
 8002920:	0008      	movs	r0, r1
 8002922:	0011      	movs	r1, r2
 8002924:	2200      	movs	r2, #0
 8002926:	4c06      	ldr	r4, [pc, #24]	; (8002940 <_write_r+0x24>)
 8002928:	6022      	str	r2, [r4, #0]
 800292a:	001a      	movs	r2, r3
 800292c:	f7fe fde0 	bl	80014f0 <_write>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d103      	bne.n	800293c <_write_r+0x20>
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d000      	beq.n	800293c <_write_r+0x20>
 800293a:	602b      	str	r3, [r5, #0]
 800293c:	bd70      	pop	{r4, r5, r6, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	20000094 	.word	0x20000094

08002944 <_close_r>:
 8002944:	2300      	movs	r3, #0
 8002946:	b570      	push	{r4, r5, r6, lr}
 8002948:	4c06      	ldr	r4, [pc, #24]	; (8002964 <_close_r+0x20>)
 800294a:	0005      	movs	r5, r0
 800294c:	0008      	movs	r0, r1
 800294e:	6023      	str	r3, [r4, #0]
 8002950:	f7fe fe9b 	bl	800168a <_close>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d103      	bne.n	8002960 <_close_r+0x1c>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d000      	beq.n	8002960 <_close_r+0x1c>
 800295e:	602b      	str	r3, [r5, #0]
 8002960:	bd70      	pop	{r4, r5, r6, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	20000094 	.word	0x20000094

08002968 <_fstat_r>:
 8002968:	2300      	movs	r3, #0
 800296a:	b570      	push	{r4, r5, r6, lr}
 800296c:	4c06      	ldr	r4, [pc, #24]	; (8002988 <_fstat_r+0x20>)
 800296e:	0005      	movs	r5, r0
 8002970:	0008      	movs	r0, r1
 8002972:	0011      	movs	r1, r2
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	f7fe fe92 	bl	800169e <_fstat>
 800297a:	1c43      	adds	r3, r0, #1
 800297c:	d103      	bne.n	8002986 <_fstat_r+0x1e>
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d000      	beq.n	8002986 <_fstat_r+0x1e>
 8002984:	602b      	str	r3, [r5, #0]
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	20000094 	.word	0x20000094

0800298c <_isatty_r>:
 800298c:	2300      	movs	r3, #0
 800298e:	b570      	push	{r4, r5, r6, lr}
 8002990:	4c06      	ldr	r4, [pc, #24]	; (80029ac <_isatty_r+0x20>)
 8002992:	0005      	movs	r5, r0
 8002994:	0008      	movs	r0, r1
 8002996:	6023      	str	r3, [r4, #0]
 8002998:	f7fe fe8f 	bl	80016ba <_isatty>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d103      	bne.n	80029a8 <_isatty_r+0x1c>
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d000      	beq.n	80029a8 <_isatty_r+0x1c>
 80029a6:	602b      	str	r3, [r5, #0]
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	20000094 	.word	0x20000094

080029b0 <_lseek_r>:
 80029b0:	b570      	push	{r4, r5, r6, lr}
 80029b2:	0005      	movs	r5, r0
 80029b4:	0008      	movs	r0, r1
 80029b6:	0011      	movs	r1, r2
 80029b8:	2200      	movs	r2, #0
 80029ba:	4c06      	ldr	r4, [pc, #24]	; (80029d4 <_lseek_r+0x24>)
 80029bc:	6022      	str	r2, [r4, #0]
 80029be:	001a      	movs	r2, r3
 80029c0:	f7fe fe84 	bl	80016cc <_lseek>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	d103      	bne.n	80029d0 <_lseek_r+0x20>
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d000      	beq.n	80029d0 <_lseek_r+0x20>
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	20000094 	.word	0x20000094

080029d8 <memchr>:
 80029d8:	b2c9      	uxtb	r1, r1
 80029da:	1882      	adds	r2, r0, r2
 80029dc:	4290      	cmp	r0, r2
 80029de:	d101      	bne.n	80029e4 <memchr+0xc>
 80029e0:	2000      	movs	r0, #0
 80029e2:	4770      	bx	lr
 80029e4:	7803      	ldrb	r3, [r0, #0]
 80029e6:	428b      	cmp	r3, r1
 80029e8:	d0fb      	beq.n	80029e2 <memchr+0xa>
 80029ea:	3001      	adds	r0, #1
 80029ec:	e7f6      	b.n	80029dc <memchr+0x4>

080029ee <__malloc_lock>:
 80029ee:	4770      	bx	lr

080029f0 <__malloc_unlock>:
 80029f0:	4770      	bx	lr
	...

080029f4 <_read_r>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	0005      	movs	r5, r0
 80029f8:	0008      	movs	r0, r1
 80029fa:	0011      	movs	r1, r2
 80029fc:	2200      	movs	r2, #0
 80029fe:	4c06      	ldr	r4, [pc, #24]	; (8002a18 <_read_r+0x24>)
 8002a00:	6022      	str	r2, [r4, #0]
 8002a02:	001a      	movs	r2, r3
 8002a04:	f7fe fe24 	bl	8001650 <_read>
 8002a08:	1c43      	adds	r3, r0, #1
 8002a0a:	d103      	bne.n	8002a14 <_read_r+0x20>
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d000      	beq.n	8002a14 <_read_r+0x20>
 8002a12:	602b      	str	r3, [r5, #0]
 8002a14:	bd70      	pop	{r4, r5, r6, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	20000094 	.word	0x20000094

08002a1c <_init>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a22:	bc08      	pop	{r3}
 8002a24:	469e      	mov	lr, r3
 8002a26:	4770      	bx	lr

08002a28 <_fini>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2e:	bc08      	pop	{r3}
 8002a30:	469e      	mov	lr, r3
 8002a32:	4770      	bx	lr
